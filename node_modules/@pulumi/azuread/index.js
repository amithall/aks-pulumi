"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
// Export members:
__export(require("./application"));
__export(require("./applicationAppRole"));
__export(require("./applicationCertificate"));
__export(require("./applicationOAuth2Permission"));
__export(require("./applicationOauth2PermissionScope"));
__export(require("./applicationPassword"));
__export(require("./getApplication"));
__export(require("./getClientConfig"));
__export(require("./getDomains"));
__export(require("./getGroup"));
__export(require("./getGroups"));
__export(require("./getServicePrincipal"));
__export(require("./getUser"));
__export(require("./getUsers"));
__export(require("./group"));
__export(require("./groupMember"));
__export(require("./provider"));
__export(require("./servicePrincipal"));
__export(require("./servicePrincipalCertificate"));
__export(require("./servicePrincipalPassword"));
__export(require("./user"));
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
// Import resources to register:
const application_1 = require("./application");
const applicationAppRole_1 = require("./applicationAppRole");
const applicationCertificate_1 = require("./applicationCertificate");
const applicationOAuth2Permission_1 = require("./applicationOAuth2Permission");
const applicationOauth2PermissionScope_1 = require("./applicationOauth2PermissionScope");
const applicationPassword_1 = require("./applicationPassword");
const group_1 = require("./group");
const groupMember_1 = require("./groupMember");
const servicePrincipal_1 = require("./servicePrincipal");
const servicePrincipalCertificate_1 = require("./servicePrincipalCertificate");
const servicePrincipalPassword_1 = require("./servicePrincipalPassword");
const user_1 = require("./user");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azuread:index/application:Application":
                return new application_1.Application(name, undefined, { urn });
            case "azuread:index/applicationAppRole:ApplicationAppRole":
                return new applicationAppRole_1.ApplicationAppRole(name, undefined, { urn });
            case "azuread:index/applicationCertificate:ApplicationCertificate":
                return new applicationCertificate_1.ApplicationCertificate(name, undefined, { urn });
            case "azuread:index/applicationOAuth2Permission:ApplicationOAuth2Permission":
                return new applicationOAuth2Permission_1.ApplicationOAuth2Permission(name, undefined, { urn });
            case "azuread:index/applicationOauth2PermissionScope:ApplicationOauth2PermissionScope":
                return new applicationOauth2PermissionScope_1.ApplicationOauth2PermissionScope(name, undefined, { urn });
            case "azuread:index/applicationPassword:ApplicationPassword":
                return new applicationPassword_1.ApplicationPassword(name, undefined, { urn });
            case "azuread:index/group:Group":
                return new group_1.Group(name, undefined, { urn });
            case "azuread:index/groupMember:GroupMember":
                return new groupMember_1.GroupMember(name, undefined, { urn });
            case "azuread:index/servicePrincipal:ServicePrincipal":
                return new servicePrincipal_1.ServicePrincipal(name, undefined, { urn });
            case "azuread:index/servicePrincipalCertificate:ServicePrincipalCertificate":
                return new servicePrincipalCertificate_1.ServicePrincipalCertificate(name, undefined, { urn });
            case "azuread:index/servicePrincipalPassword:ServicePrincipalPassword":
                return new servicePrincipalPassword_1.ServicePrincipalPassword(name, undefined, { urn });
            case "azuread:index/user:User":
                return new user_1.User(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azuread", "index/application", _module);
pulumi.runtime.registerResourceModule("azuread", "index/applicationAppRole", _module);
pulumi.runtime.registerResourceModule("azuread", "index/applicationCertificate", _module);
pulumi.runtime.registerResourceModule("azuread", "index/applicationOAuth2Permission", _module);
pulumi.runtime.registerResourceModule("azuread", "index/applicationOauth2PermissionScope", _module);
pulumi.runtime.registerResourceModule("azuread", "index/applicationPassword", _module);
pulumi.runtime.registerResourceModule("azuread", "index/group", _module);
pulumi.runtime.registerResourceModule("azuread", "index/groupMember", _module);
pulumi.runtime.registerResourceModule("azuread", "index/servicePrincipal", _module);
pulumi.runtime.registerResourceModule("azuread", "index/servicePrincipalCertificate", _module);
pulumi.runtime.registerResourceModule("azuread", "index/servicePrincipalPassword", _module);
pulumi.runtime.registerResourceModule("azuread", "index/user", _module);
const provider_1 = require("./provider");
pulumi.runtime.registerResourcePackage("azuread", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:azuread") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new provider_1.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map