"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Manages an App Role associated with an Application within Azure Active Directory.
 *
 * > **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuread from "@pulumi/azuread";
 *
 * const exampleApplication = new azuread.Application("exampleApplication", {});
 * const exampleApplicationAppRole = new azuread.ApplicationAppRole("exampleApplicationAppRole", {
 *     applicationObjectId: exampleApplication.id,
 *     allowedMemberTypes: ["User"],
 *     description: "Admins can manage roles and perform all task actions",
 *     displayName: "Admin",
 *     enabled: true,
 *     value: "administer",
 * });
 * ```
 *
 * ## Import
 *
 * App Roles can be imported using the `object_id` of an Application and the `id` of the App Role, e.g.
 *
 * ```sh
 *  $ pulumi import azuread:index/applicationAppRole:ApplicationAppRole test 00000000-0000-0000-0000-000000000000/role/11111111-1111-1111-1111-111111111111
 * ```
 */
class ApplicationAppRole extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["allowedMemberTypes"] = state ? state.allowedMemberTypes : undefined;
            inputs["applicationObjectId"] = state ? state.applicationObjectId : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["isEnabled"] = state ? state.isEnabled : undefined;
            inputs["roleId"] = state ? state.roleId : undefined;
            inputs["value"] = state ? state.value : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.allowedMemberTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowedMemberTypes'");
            }
            if ((!args || args.applicationObjectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationObjectId'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            inputs["allowedMemberTypes"] = args ? args.allowedMemberTypes : undefined;
            inputs["applicationObjectId"] = args ? args.applicationObjectId : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["isEnabled"] = args ? args.isEnabled : undefined;
            inputs["roleId"] = args ? args.roleId : undefined;
            inputs["value"] = args ? args.value : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(ApplicationAppRole.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ApplicationAppRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ApplicationAppRole(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ApplicationAppRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationAppRole.__pulumiType;
    }
}
exports.ApplicationAppRole = ApplicationAppRole;
/** @internal */
ApplicationAppRole.__pulumiType = 'azuread:index/applicationAppRole:ApplicationAppRole';
//# sourceMappingURL=applicationAppRole.js.map