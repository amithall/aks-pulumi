"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Manages an OAuth2 Permission (also known as a Scope) associated with an Application within Azure Active Directory.
 *
 * > This resource is deprecated in favour of azuread.ApplicationOauth2PermissionScope and will be removed in version 2.0 of the provider.
 *
 * > **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuread from "@pulumi/azuread";
 *
 * const exampleApplication = new azuread.Application("exampleApplication", {});
 * const exampleApplicationOAuth2Permission = new azuread.ApplicationOAuth2Permission("exampleApplicationOAuth2Permission", {
 *     applicationObjectId: exampleApplication.id,
 *     adminConsentDescription: "Administer the application",
 *     adminConsentDisplayName: "Administer",
 *     isEnabled: true,
 *     type: "User",
 *     userConsentDescription: "Administer the application",
 *     userConsentDisplayName: "Administer",
 *     value: "administer",
 * });
 * ```
 *
 * ## Import
 *
 * OAuth2 Permissions can be imported using the `object id` of an Application and the `id` of the Permission, e.g.
 *
 * ```sh
 *  $ pulumi import azuread:index/applicationOAuth2Permission:ApplicationOAuth2Permission test 00000000-0000-0000-0000-000000000000/scope/11111111-1111-1111-1111-111111111111
 * ```
 */
class ApplicationOAuth2Permission extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["adminConsentDescription"] = state ? state.adminConsentDescription : undefined;
            inputs["adminConsentDisplayName"] = state ? state.adminConsentDisplayName : undefined;
            inputs["applicationObjectId"] = state ? state.applicationObjectId : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["isEnabled"] = state ? state.isEnabled : undefined;
            inputs["permissionId"] = state ? state.permissionId : undefined;
            inputs["scopeId"] = state ? state.scopeId : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["userConsentDescription"] = state ? state.userConsentDescription : undefined;
            inputs["userConsentDisplayName"] = state ? state.userConsentDisplayName : undefined;
            inputs["value"] = state ? state.value : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.adminConsentDescription === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminConsentDescription'");
            }
            if ((!args || args.adminConsentDisplayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminConsentDisplayName'");
            }
            if ((!args || args.applicationObjectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationObjectId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.userConsentDescription === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userConsentDescription'");
            }
            if ((!args || args.userConsentDisplayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userConsentDisplayName'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            inputs["adminConsentDescription"] = args ? args.adminConsentDescription : undefined;
            inputs["adminConsentDisplayName"] = args ? args.adminConsentDisplayName : undefined;
            inputs["applicationObjectId"] = args ? args.applicationObjectId : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["isEnabled"] = args ? args.isEnabled : undefined;
            inputs["permissionId"] = args ? args.permissionId : undefined;
            inputs["scopeId"] = args ? args.scopeId : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["userConsentDescription"] = args ? args.userConsentDescription : undefined;
            inputs["userConsentDisplayName"] = args ? args.userConsentDisplayName : undefined;
            inputs["value"] = args ? args.value : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(ApplicationOAuth2Permission.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ApplicationOAuth2Permission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ApplicationOAuth2Permission(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ApplicationOAuth2Permission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationOAuth2Permission.__pulumiType;
    }
}
exports.ApplicationOAuth2Permission = ApplicationOAuth2Permission;
/** @internal */
ApplicationOAuth2Permission.__pulumiType = 'azuread:index/applicationOAuth2Permission:ApplicationOAuth2Permission';
//# sourceMappingURL=applicationOAuth2Permission.js.map