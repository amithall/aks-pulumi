"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Manages an Application within Azure Active Directory.
 *
 * > **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write owned by applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuread from "@pulumi/azuread";
 *
 * const current = azuread.getClientConfig({});
 * const example = new azuread.Application("example", {
 *     displayName: "example",
 *     identifierUris: ["api://example-app"],
 *     owners: [current.then(current => current.objectId)],
 *     signInAudience: "AzureADMultipleOrgs",
 *     api: {
 *         oauth2PermissionScopes: [
 *             {
 *                 adminConsentDescription: "Allow the application to access example on behalf of the signed-in user.",
 *                 adminConsentDisplayName: "Access example",
 *                 enabled: true,
 *                 id: "96183846-204b-4b43-82e1-5d2222eb4b9b",
 *                 type: "User",
 *                 userConsentDescription: "Allow the application to access example on your behalf.",
 *                 userConsentDisplayName: "Access example",
 *                 value: "user_impersonation",
 *             },
 *             {
 *                 adminConsentDescription: "Administer the example application",
 *                 adminConsentDisplayName: "Administer",
 *                 enabled: true,
 *                 id: "be98fa3e-ab5b-4b11-83d9-04ba2b7946bc",
 *                 type: "Admin",
 *                 value: "administer",
 *             },
 *         ],
 *     },
 *     appRoles: [{
 *         allowedMemberTypes: [
 *             "User",
 *             "Application",
 *         ],
 *         description: "Admins can manage roles and perform all task actions",
 *         displayName: "Admin",
 *         isEnabled: true,
 *         value: "admin",
 *     }],
 *     optionalClaims: {
 *         accessTokens: [
 *             {
 *                 name: "myclaim",
 *             },
 *             {
 *                 name: "otherclaim",
 *             },
 *         ],
 *         idTokens: [{
 *             name: "userclaim",
 *             source: "user",
 *             essential: true,
 *             additionalProperties: ["emit_as_roles"],
 *         }],
 *     },
 *     requiredResourceAccesses: [
 *         {
 *             resourceAppId: "00000003-0000-0000-c000-000000000000",
 *             resourceAccesses: [
 *                 {
 *                     id: "...",
 *                     type: "Role",
 *                 },
 *                 {
 *                     id: "...",
 *                     type: "Scope",
 *                 },
 *                 {
 *                     id: "...",
 *                     type: "Scope",
 *                 },
 *             ],
 *         },
 *         {
 *             resourceAppId: "00000002-0000-0000-c000-000000000000",
 *             resourceAccesses: [{
 *                 id: "...",
 *                 type: "Scope",
 *             }],
 *         },
 *     ],
 *     web: {
 *         homepageUrl: "https://app.example.net",
 *         logoutUrl: "https://app.example.net/logout",
 *         redirectUris: ["https://app.example.net/account"],
 *         implicitGrant: {
 *             accessTokenIssuanceEnabled: true,
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Azure Active Directory Applications can be imported using the `object id`, e.g.
 *
 * ```sh
 *  $ pulumi import azuread:index/application:Application test 00000000-0000-0000-0000-000000000000
 * ```
 */
class Application extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["api"] = state ? state.api : undefined;
            inputs["appRoles"] = state ? state.appRoles : undefined;
            inputs["applicationId"] = state ? state.applicationId : undefined;
            inputs["availableToOtherTenants"] = state ? state.availableToOtherTenants : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["fallbackPublicClientEnabled"] = state ? state.fallbackPublicClientEnabled : undefined;
            inputs["groupMembershipClaims"] = state ? state.groupMembershipClaims : undefined;
            inputs["homepage"] = state ? state.homepage : undefined;
            inputs["identifierUris"] = state ? state.identifierUris : undefined;
            inputs["logoutUrl"] = state ? state.logoutUrl : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["oauth2AllowImplicitFlow"] = state ? state.oauth2AllowImplicitFlow : undefined;
            inputs["oauth2Permissions"] = state ? state.oauth2Permissions : undefined;
            inputs["objectId"] = state ? state.objectId : undefined;
            inputs["optionalClaims"] = state ? state.optionalClaims : undefined;
            inputs["owners"] = state ? state.owners : undefined;
            inputs["preventDuplicateNames"] = state ? state.preventDuplicateNames : undefined;
            inputs["publicClient"] = state ? state.publicClient : undefined;
            inputs["replyUrls"] = state ? state.replyUrls : undefined;
            inputs["requiredResourceAccesses"] = state ? state.requiredResourceAccesses : undefined;
            inputs["signInAudience"] = state ? state.signInAudience : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["web"] = state ? state.web : undefined;
        }
        else {
            const args = argsOrState;
            inputs["api"] = args ? args.api : undefined;
            inputs["appRoles"] = args ? args.appRoles : undefined;
            inputs["availableToOtherTenants"] = args ? args.availableToOtherTenants : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["fallbackPublicClientEnabled"] = args ? args.fallbackPublicClientEnabled : undefined;
            inputs["groupMembershipClaims"] = args ? args.groupMembershipClaims : undefined;
            inputs["homepage"] = args ? args.homepage : undefined;
            inputs["identifierUris"] = args ? args.identifierUris : undefined;
            inputs["logoutUrl"] = args ? args.logoutUrl : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["oauth2AllowImplicitFlow"] = args ? args.oauth2AllowImplicitFlow : undefined;
            inputs["oauth2Permissions"] = args ? args.oauth2Permissions : undefined;
            inputs["optionalClaims"] = args ? args.optionalClaims : undefined;
            inputs["owners"] = args ? args.owners : undefined;
            inputs["preventDuplicateNames"] = args ? args.preventDuplicateNames : undefined;
            inputs["publicClient"] = args ? args.publicClient : undefined;
            inputs["replyUrls"] = args ? args.replyUrls : undefined;
            inputs["requiredResourceAccesses"] = args ? args.requiredResourceAccesses : undefined;
            inputs["signInAudience"] = args ? args.signInAudience : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["web"] = args ? args.web : undefined;
            inputs["applicationId"] = undefined /*out*/;
            inputs["objectId"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Application.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Application(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Application.__pulumiType;
    }
}
exports.Application = Application;
/** @internal */
Application.__pulumiType = 'azuread:index/application:Application';
//# sourceMappingURL=application.js.map