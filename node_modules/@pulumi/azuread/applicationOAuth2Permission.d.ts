import * as pulumi from "@pulumi/pulumi";
/**
 * Manages an OAuth2 Permission (also known as a Scope) associated with an Application within Azure Active Directory.
 *
 * > This resource is deprecated in favour of azuread.ApplicationOauth2PermissionScope and will be removed in version 2.0 of the provider.
 *
 * > **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuread from "@pulumi/azuread";
 *
 * const exampleApplication = new azuread.Application("exampleApplication", {});
 * const exampleApplicationOAuth2Permission = new azuread.ApplicationOAuth2Permission("exampleApplicationOAuth2Permission", {
 *     applicationObjectId: exampleApplication.id,
 *     adminConsentDescription: "Administer the application",
 *     adminConsentDisplayName: "Administer",
 *     isEnabled: true,
 *     type: "User",
 *     userConsentDescription: "Administer the application",
 *     userConsentDisplayName: "Administer",
 *     value: "administer",
 * });
 * ```
 *
 * ## Import
 *
 * OAuth2 Permissions can be imported using the `object id` of an Application and the `id` of the Permission, e.g.
 *
 * ```sh
 *  $ pulumi import azuread:index/applicationOAuth2Permission:ApplicationOAuth2Permission test 00000000-0000-0000-0000-000000000000/scope/11111111-1111-1111-1111-111111111111
 * ```
 */
export declare class ApplicationOAuth2Permission extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationOAuth2Permission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationOAuth2PermissionState, opts?: pulumi.CustomResourceOptions): ApplicationOAuth2Permission;
    /**
     * Returns true if the given object is an instance of ApplicationOAuth2Permission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ApplicationOAuth2Permission;
    /**
     * Permission help text that appears in the admin consent and app assignment experiences.
     */
    readonly adminConsentDescription: pulumi.Output<string>;
    /**
     * Display name for the permission that appears in the admin consent and app assignment experiences.
     */
    readonly adminConsentDisplayName: pulumi.Output<string>;
    /**
     * The Object ID of the Application for which this Permission should be created. Changing this field forces a new resource to be created.
     */
    readonly applicationObjectId: pulumi.Output<string>;
    readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * Determines if the Permission is enabled. Defaults to `true`.
     *
     * @deprecated [NOTE] This attribute has been renamed to `enabled` and will be removed in version 2.0 of the AzureAD provider
     */
    readonly isEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Specifies a custom UUID for the Permission. If omitted, a random UUID will be automatically generated. Changing this field forces a new resource to be created.
     *
     * @deprecated [NOTE] This attribute has been renamed to `scope_id` and will be removed in version 2.0 of the AzureAD provider
     */
    readonly permissionId: pulumi.Output<string>;
    readonly scopeId: pulumi.Output<string>;
    /**
     * Specifies whether this scope permission can be consented to by an end user, or whether it is a tenant-wide permission that must be consented to by an Administrator. Possible values are "User" or "Admin".
     */
    readonly type: pulumi.Output<string>;
    /**
     * Permission help text that appears in the end user consent experience.
     */
    readonly userConsentDescription: pulumi.Output<string>;
    /**
     * Display name for the permission that appears in the end user consent experience.
     */
    readonly userConsentDisplayName: pulumi.Output<string>;
    /**
     * The value of the scope claim that the resource application should expect in the OAuth 2.0 access token.
     */
    readonly value: pulumi.Output<string>;
    /**
     * Create a ApplicationOAuth2Permission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationOAuth2PermissionArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering ApplicationOAuth2Permission resources.
 */
export interface ApplicationOAuth2PermissionState {
    /**
     * Permission help text that appears in the admin consent and app assignment experiences.
     */
    adminConsentDescription?: pulumi.Input<string>;
    /**
     * Display name for the permission that appears in the admin consent and app assignment experiences.
     */
    adminConsentDisplayName?: pulumi.Input<string>;
    /**
     * The Object ID of the Application for which this Permission should be created. Changing this field forces a new resource to be created.
     */
    applicationObjectId?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    /**
     * Determines if the Permission is enabled. Defaults to `true`.
     *
     * @deprecated [NOTE] This attribute has been renamed to `enabled` and will be removed in version 2.0 of the AzureAD provider
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies a custom UUID for the Permission. If omitted, a random UUID will be automatically generated. Changing this field forces a new resource to be created.
     *
     * @deprecated [NOTE] This attribute has been renamed to `scope_id` and will be removed in version 2.0 of the AzureAD provider
     */
    permissionId?: pulumi.Input<string>;
    scopeId?: pulumi.Input<string>;
    /**
     * Specifies whether this scope permission can be consented to by an end user, or whether it is a tenant-wide permission that must be consented to by an Administrator. Possible values are "User" or "Admin".
     */
    type?: pulumi.Input<string>;
    /**
     * Permission help text that appears in the end user consent experience.
     */
    userConsentDescription?: pulumi.Input<string>;
    /**
     * Display name for the permission that appears in the end user consent experience.
     */
    userConsentDisplayName?: pulumi.Input<string>;
    /**
     * The value of the scope claim that the resource application should expect in the OAuth 2.0 access token.
     */
    value?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a ApplicationOAuth2Permission resource.
 */
export interface ApplicationOAuth2PermissionArgs {
    /**
     * Permission help text that appears in the admin consent and app assignment experiences.
     */
    adminConsentDescription: pulumi.Input<string>;
    /**
     * Display name for the permission that appears in the admin consent and app assignment experiences.
     */
    adminConsentDisplayName: pulumi.Input<string>;
    /**
     * The Object ID of the Application for which this Permission should be created. Changing this field forces a new resource to be created.
     */
    applicationObjectId: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    /**
     * Determines if the Permission is enabled. Defaults to `true`.
     *
     * @deprecated [NOTE] This attribute has been renamed to `enabled` and will be removed in version 2.0 of the AzureAD provider
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies a custom UUID for the Permission. If omitted, a random UUID will be automatically generated. Changing this field forces a new resource to be created.
     *
     * @deprecated [NOTE] This attribute has been renamed to `scope_id` and will be removed in version 2.0 of the AzureAD provider
     */
    permissionId?: pulumi.Input<string>;
    scopeId?: pulumi.Input<string>;
    /**
     * Specifies whether this scope permission can be consented to by an end user, or whether it is a tenant-wide permission that must be consented to by an Administrator. Possible values are "User" or "Admin".
     */
    type: pulumi.Input<string>;
    /**
     * Permission help text that appears in the end user consent experience.
     */
    userConsentDescription: pulumi.Input<string>;
    /**
     * Display name for the permission that appears in the end user consent experience.
     */
    userConsentDisplayName: pulumi.Input<string>;
    /**
     * The value of the scope claim that the resource application should expect in the OAuth 2.0 access token.
     */
    value: pulumi.Input<string>;
}
