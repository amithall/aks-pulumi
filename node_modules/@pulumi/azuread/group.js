"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Manages a Group within Azure Active Directory.
 *
 * > **NOTE:** If you're authenticating using a Service Principal then it must have permissions to `Read and write all groups` within the `Windows Azure Active Directory` API. In addition it must also have either the `Groups Administrator` or `User Administrator` Azure Active Directory roles assigned in order to be able to delete groups. You can assign one of the required Azure Active Directory Roles with the **AzureAD PowerShell Module**, which is available for Windows PowerShell or in the Azure Cloud Shell. Please refer to [this documentation](https://docs.microsoft.com/en-us/powershell/module/azuread/add-azureaddirectoryrolemember) for more details.
 *
 * ## Example Usage
 *
 * *Basic example*
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuread from "@pulumi/azuread";
 *
 * const example = new azuread.Group("example", {
 *     displayName: "A-AD-Group",
 * });
 * ```
 *
 * *A group with members*
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuread from "@pulumi/azuread";
 *
 * const exampleUser = new azuread.User("exampleUser", {
 *     displayName: "J Doe",
 *     password: "notSecure123",
 *     userPrincipalName: "jdoe@hashicorp.com",
 * });
 * const exampleGroup = new azuread.Group("exampleGroup", {
 *     displayName: "MyGroup",
 *     members: [exampleUser.objectId],
 * });
 * ```
 *
 * ## Import
 *
 * Azure Active Directory Groups can be imported using the `object id`, e.g.
 *
 * ```sh
 *  $ pulumi import azuread:index/group:Group my_group 00000000-0000-0000-0000-000000000000
 * ```
 */
class Group extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["description"] = state ? state.description : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["mailEnabled"] = state ? state.mailEnabled : undefined;
            inputs["members"] = state ? state.members : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["objectId"] = state ? state.objectId : undefined;
            inputs["owners"] = state ? state.owners : undefined;
            inputs["preventDuplicateNames"] = state ? state.preventDuplicateNames : undefined;
            inputs["securityEnabled"] = state ? state.securityEnabled : undefined;
        }
        else {
            const args = argsOrState;
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["members"] = args ? args.members : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["owners"] = args ? args.owners : undefined;
            inputs["preventDuplicateNames"] = args ? args.preventDuplicateNames : undefined;
            inputs["mailEnabled"] = undefined /*out*/;
            inputs["objectId"] = undefined /*out*/;
            inputs["securityEnabled"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Group.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Group resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Group(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Group.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Group.__pulumiType;
    }
}
exports.Group = Group;
/** @internal */
Group.__pulumiType = 'azuread:index/group:Group';
//# sourceMappingURL=group.js.map