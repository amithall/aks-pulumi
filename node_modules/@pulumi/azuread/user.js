"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Manages a User within Azure Active Directory.
 *
 * > **NOTE:** If you're authenticating using a Service Principal then it must have permissions to `Directory.ReadWrite.All` within the `Windows Azure Active Directory` API.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuread from "@pulumi/azuread";
 *
 * const example = new azuread.User("example", {
 *     displayName: "J. Doe",
 *     mailNickname: "jdoe",
 *     password: "SecretP@sswd99!",
 *     userPrincipalName: "jdoe@hashicorp.com",
 * });
 * ```
 *
 * ## Import
 *
 * Azure Active Directory Users can be imported using the `object id`, e.g.
 *
 * ```sh
 *  $ pulumi import azuread:index/user:User my_user 00000000-0000-0000-0000-000000000000
 * ```
 */
class User extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["accountEnabled"] = state ? state.accountEnabled : undefined;
            inputs["city"] = state ? state.city : undefined;
            inputs["companyName"] = state ? state.companyName : undefined;
            inputs["country"] = state ? state.country : undefined;
            inputs["department"] = state ? state.department : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["forcePasswordChange"] = state ? state.forcePasswordChange : undefined;
            inputs["givenName"] = state ? state.givenName : undefined;
            inputs["immutableId"] = state ? state.immutableId : undefined;
            inputs["jobTitle"] = state ? state.jobTitle : undefined;
            inputs["mail"] = state ? state.mail : undefined;
            inputs["mailNickname"] = state ? state.mailNickname : undefined;
            inputs["mobile"] = state ? state.mobile : undefined;
            inputs["mobilePhone"] = state ? state.mobilePhone : undefined;
            inputs["objectId"] = state ? state.objectId : undefined;
            inputs["officeLocation"] = state ? state.officeLocation : undefined;
            inputs["onpremisesImmutableId"] = state ? state.onpremisesImmutableId : undefined;
            inputs["onpremisesSamAccountName"] = state ? state.onpremisesSamAccountName : undefined;
            inputs["onpremisesUserPrincipalName"] = state ? state.onpremisesUserPrincipalName : undefined;
            inputs["password"] = state ? state.password : undefined;
            inputs["physicalDeliveryOfficeName"] = state ? state.physicalDeliveryOfficeName : undefined;
            inputs["postalCode"] = state ? state.postalCode : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["streetAddress"] = state ? state.streetAddress : undefined;
            inputs["surname"] = state ? state.surname : undefined;
            inputs["usageLocation"] = state ? state.usageLocation : undefined;
            inputs["userPrincipalName"] = state ? state.userPrincipalName : undefined;
            inputs["userType"] = state ? state.userType : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.userPrincipalName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userPrincipalName'");
            }
            inputs["accountEnabled"] = args ? args.accountEnabled : undefined;
            inputs["city"] = args ? args.city : undefined;
            inputs["companyName"] = args ? args.companyName : undefined;
            inputs["country"] = args ? args.country : undefined;
            inputs["department"] = args ? args.department : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["forcePasswordChange"] = args ? args.forcePasswordChange : undefined;
            inputs["givenName"] = args ? args.givenName : undefined;
            inputs["immutableId"] = args ? args.immutableId : undefined;
            inputs["jobTitle"] = args ? args.jobTitle : undefined;
            inputs["mailNickname"] = args ? args.mailNickname : undefined;
            inputs["mobile"] = args ? args.mobile : undefined;
            inputs["mobilePhone"] = args ? args.mobilePhone : undefined;
            inputs["officeLocation"] = args ? args.officeLocation : undefined;
            inputs["onpremisesImmutableId"] = args ? args.onpremisesImmutableId : undefined;
            inputs["password"] = args ? args.password : undefined;
            inputs["physicalDeliveryOfficeName"] = args ? args.physicalDeliveryOfficeName : undefined;
            inputs["postalCode"] = args ? args.postalCode : undefined;
            inputs["state"] = args ? args.state : undefined;
            inputs["streetAddress"] = args ? args.streetAddress : undefined;
            inputs["surname"] = args ? args.surname : undefined;
            inputs["usageLocation"] = args ? args.usageLocation : undefined;
            inputs["userPrincipalName"] = args ? args.userPrincipalName : undefined;
            inputs["mail"] = undefined /*out*/;
            inputs["objectId"] = undefined /*out*/;
            inputs["onpremisesSamAccountName"] = undefined /*out*/;
            inputs["onpremisesUserPrincipalName"] = undefined /*out*/;
            inputs["userType"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(User.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new User(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }
}
exports.User = User;
/** @internal */
User.__pulumiType = 'azuread:index/user:User';
//# sourceMappingURL=user.js.map