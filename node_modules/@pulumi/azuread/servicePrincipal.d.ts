import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
/**
 * Manages a Service Principal associated with an Application within Azure Active Directory.
 *
 * > **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API. Please see The Granting a Service Principal permission to manage AAD for the required steps.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuread from "@pulumi/azuread";
 *
 * const exampleApplication = new azuread.Application("exampleApplication", {
 *     displayName: "example",
 *     homepage: "http://homepage",
 *     identifierUris: ["http://uri"],
 *     replyUrls: ["http://replyurl"],
 *     availableToOtherTenants: false,
 *     oauth2AllowImplicitFlow: true,
 * });
 * const exampleServicePrincipal = new azuread.ServicePrincipal("exampleServicePrincipal", {
 *     applicationId: exampleApplication.applicationId,
 *     appRoleAssignmentRequired: false,
 *     tags: [
 *         "example",
 *         "tags",
 *         "here",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Azure Active Directory Service Principals can be imported using the `object id`, e.g.
 *
 * ```sh
 *  $ pulumi import azuread:index/servicePrincipal:ServicePrincipal test 00000000-0000-0000-0000-000000000000
 * ```
 */
export declare class ServicePrincipal extends pulumi.CustomResource {
    /**
     * Get an existing ServicePrincipal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServicePrincipalState, opts?: pulumi.CustomResourceOptions): ServicePrincipal;
    /**
     * Returns true if the given object is an instance of ServicePrincipal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ServicePrincipal;
    /**
     * Whether this Service Principal requires an AppRoleAssignment to a user or group before Azure AD will issue a user or access token to the application. Defaults to `false`.
     */
    readonly appRoleAssignmentRequired: pulumi.Output<boolean | undefined>;
    /**
     * A collection of `appRoles` blocks as documented below. For more information [official documentation](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).
     */
    readonly appRoles: pulumi.Output<outputs.ServicePrincipalAppRole[]>;
    /**
     * The App ID of the Application for which to create a Service Principal.
     */
    readonly applicationId: pulumi.Output<string>;
    /**
     * Display name for the permission that appears in the admin consent and app assignment experiences.
     */
    readonly displayName: pulumi.Output<string>;
    /**
     * A collection of OAuth 2.0 delegated permissions exposed by the associated Application. Each permission is covered by an `oauth2PermissionScopes` block as documented below.
     */
    readonly oauth2PermissionScopes: pulumi.Output<outputs.ServicePrincipalOauth2PermissionScope[]>;
    /**
     * (**Deprecated**) A collection of OAuth 2.0 permissions exposed by the associated Application. Each permission is covered by an `oauth2Permissions` block as documented below. Deprecated in favour of `oauth2PermissionScopes`.
     *
     * @deprecated [NOTE] The `oauth2_permissions` block has been renamed to `oauth2_permission_scopes` and moved to the `api` block. `oauth2_permissions` will be removed in version 2.0 of the AzureAD provider.
     */
    readonly oauth2Permissions: pulumi.Output<outputs.ServicePrincipalOauth2Permission[]>;
    /**
     * The Object ID of the Service Principal.
     */
    readonly objectId: pulumi.Output<string>;
    /**
     * A list of tags to apply to the Service Principal.
     */
    readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * Create a ServicePrincipal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServicePrincipalArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering ServicePrincipal resources.
 */
export interface ServicePrincipalState {
    /**
     * Whether this Service Principal requires an AppRoleAssignment to a user or group before Azure AD will issue a user or access token to the application. Defaults to `false`.
     */
    appRoleAssignmentRequired?: pulumi.Input<boolean>;
    /**
     * A collection of `appRoles` blocks as documented below. For more information [official documentation](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).
     */
    appRoles?: pulumi.Input<pulumi.Input<inputs.ServicePrincipalAppRole>[]>;
    /**
     * The App ID of the Application for which to create a Service Principal.
     */
    applicationId?: pulumi.Input<string>;
    /**
     * Display name for the permission that appears in the admin consent and app assignment experiences.
     */
    displayName?: pulumi.Input<string>;
    /**
     * A collection of OAuth 2.0 delegated permissions exposed by the associated Application. Each permission is covered by an `oauth2PermissionScopes` block as documented below.
     */
    oauth2PermissionScopes?: pulumi.Input<pulumi.Input<inputs.ServicePrincipalOauth2PermissionScope>[]>;
    /**
     * (**Deprecated**) A collection of OAuth 2.0 permissions exposed by the associated Application. Each permission is covered by an `oauth2Permissions` block as documented below. Deprecated in favour of `oauth2PermissionScopes`.
     *
     * @deprecated [NOTE] The `oauth2_permissions` block has been renamed to `oauth2_permission_scopes` and moved to the `api` block. `oauth2_permissions` will be removed in version 2.0 of the AzureAD provider.
     */
    oauth2Permissions?: pulumi.Input<pulumi.Input<inputs.ServicePrincipalOauth2Permission>[]>;
    /**
     * The Object ID of the Service Principal.
     */
    objectId?: pulumi.Input<string>;
    /**
     * A list of tags to apply to the Service Principal.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
/**
 * The set of arguments for constructing a ServicePrincipal resource.
 */
export interface ServicePrincipalArgs {
    /**
     * Whether this Service Principal requires an AppRoleAssignment to a user or group before Azure AD will issue a user or access token to the application. Defaults to `false`.
     */
    appRoleAssignmentRequired?: pulumi.Input<boolean>;
    /**
     * The App ID of the Application for which to create a Service Principal.
     */
    applicationId: pulumi.Input<string>;
    /**
     * A collection of OAuth 2.0 delegated permissions exposed by the associated Application. Each permission is covered by an `oauth2PermissionScopes` block as documented below.
     */
    oauth2PermissionScopes?: pulumi.Input<pulumi.Input<inputs.ServicePrincipalOauth2PermissionScope>[]>;
    /**
     * (**Deprecated**) A collection of OAuth 2.0 permissions exposed by the associated Application. Each permission is covered by an `oauth2Permissions` block as documented below. Deprecated in favour of `oauth2PermissionScopes`.
     *
     * @deprecated [NOTE] The `oauth2_permissions` block has been renamed to `oauth2_permission_scopes` and moved to the `api` block. `oauth2_permissions` will be removed in version 2.0 of the AzureAD provider.
     */
    oauth2Permissions?: pulumi.Input<pulumi.Input<inputs.ServicePrincipalOauth2Permission>[]>;
    /**
     * A list of tags to apply to the Service Principal.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
