"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
// Export members:
__exportStar(require("./cluster"), exports);
__exportStar(require("./dataExport"), exports);
__exportStar(require("./dataSource"), exports);
__exportStar(require("./getCluster"), exports);
__exportStar(require("./getDataExport"), exports);
__exportStar(require("./getDataSource"), exports);
__exportStar(require("./getLinkedService"), exports);
__exportStar(require("./getLinkedStorageAccount"), exports);
__exportStar(require("./getSavedSearch"), exports);
__exportStar(require("./getSharedKeys"), exports);
__exportStar(require("./getStorageInsightConfig"), exports);
__exportStar(require("./getWorkspace"), exports);
__exportStar(require("./linkedService"), exports);
__exportStar(require("./linkedStorageAccount"), exports);
__exportStar(require("./savedSearch"), exports);
__exportStar(require("./storageInsightConfig"), exports);
__exportStar(require("./workspace"), exports);
// Export enums:
__exportStar(require("../../types/enums/operationalinsights/v20200801"), exports);
// Import resources to register:
const cluster_1 = require("./cluster");
const dataExport_1 = require("./dataExport");
const dataSource_1 = require("./dataSource");
const linkedService_1 = require("./linkedService");
const linkedStorageAccount_1 = require("./linkedStorageAccount");
const savedSearch_1 = require("./savedSearch");
const storageInsightConfig_1 = require("./storageInsightConfig");
const workspace_1 = require("./workspace");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure-native:operationalinsights/v20200801:Cluster":
                return new cluster_1.Cluster(name, undefined, { urn });
            case "azure-native:operationalinsights/v20200801:DataExport":
                return new dataExport_1.DataExport(name, undefined, { urn });
            case "azure-native:operationalinsights/v20200801:DataSource":
                return new dataSource_1.DataSource(name, undefined, { urn });
            case "azure-native:operationalinsights/v20200801:LinkedService":
                return new linkedService_1.LinkedService(name, undefined, { urn });
            case "azure-native:operationalinsights/v20200801:LinkedStorageAccount":
                return new linkedStorageAccount_1.LinkedStorageAccount(name, undefined, { urn });
            case "azure-native:operationalinsights/v20200801:SavedSearch":
                return new savedSearch_1.SavedSearch(name, undefined, { urn });
            case "azure-native:operationalinsights/v20200801:StorageInsightConfig":
                return new storageInsightConfig_1.StorageInsightConfig(name, undefined, { urn });
            case "azure-native:operationalinsights/v20200801:Workspace":
                return new workspace_1.Workspace(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "operationalinsights/v20200801", _module);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9vcGVyYXRpb25hbGluc2lnaHRzL3YyMDIwMDgwMS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsd0VBQXdFO0FBQ3hFLGlGQUFpRjs7Ozs7Ozs7Ozs7Ozs7OztBQUVqRix5Q0FBeUM7QUFDekMsNkNBQTZDO0FBRTdDLGtCQUFrQjtBQUNsQiw0Q0FBMEI7QUFDMUIsK0NBQTZCO0FBQzdCLCtDQUE2QjtBQUM3QiwrQ0FBNkI7QUFDN0Isa0RBQWdDO0FBQ2hDLGtEQUFnQztBQUNoQyxxREFBbUM7QUFDbkMsNERBQTBDO0FBQzFDLG1EQUFpQztBQUNqQyxrREFBZ0M7QUFDaEMsNERBQTBDO0FBQzFDLGlEQUErQjtBQUMvQixrREFBZ0M7QUFDaEMseURBQXVDO0FBQ3ZDLGdEQUE4QjtBQUM5Qix5REFBdUM7QUFDdkMsOENBQTRCO0FBRTVCLGdCQUFnQjtBQUNoQixrRkFBZ0U7QUFFaEUsZ0NBQWdDO0FBQ2hDLHVDQUFvQztBQUNwQyw2Q0FBMEM7QUFDMUMsNkNBQTBDO0FBQzFDLG1EQUFnRDtBQUNoRCxpRUFBOEQ7QUFDOUQsK0NBQTRDO0FBQzVDLGlFQUE4RDtBQUM5RCwyQ0FBd0M7QUFFeEMsTUFBTSxPQUFPLEdBQUc7SUFDWixPQUFPLEVBQUUsU0FBUyxDQUFDLFVBQVUsRUFBRTtJQUMvQixTQUFTLEVBQUUsQ0FBQyxJQUFZLEVBQUUsSUFBWSxFQUFFLEdBQVcsRUFBbUIsRUFBRTtRQUNwRSxRQUFRLElBQUksRUFBRTtZQUNWLEtBQUssb0RBQW9EO2dCQUNyRCxPQUFPLElBQUksaUJBQU8sQ0FBQyxJQUFJLEVBQU8sU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQTtZQUNyRCxLQUFLLHVEQUF1RDtnQkFDeEQsT0FBTyxJQUFJLHVCQUFVLENBQUMsSUFBSSxFQUFPLFNBQVMsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUE7WUFDeEQsS0FBSyx1REFBdUQ7Z0JBQ3hELE9BQU8sSUFBSSx1QkFBVSxDQUFDLElBQUksRUFBTyxTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFBO1lBQ3hELEtBQUssMERBQTBEO2dCQUMzRCxPQUFPLElBQUksNkJBQWEsQ0FBQyxJQUFJLEVBQU8sU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQTtZQUMzRCxLQUFLLGlFQUFpRTtnQkFDbEUsT0FBTyxJQUFJLDJDQUFvQixDQUFDLElBQUksRUFBTyxTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFBO1lBQ2xFLEtBQUssd0RBQXdEO2dCQUN6RCxPQUFPLElBQUkseUJBQVcsQ0FBQyxJQUFJLEVBQU8sU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQTtZQUN6RCxLQUFLLGlFQUFpRTtnQkFDbEUsT0FBTyxJQUFJLDJDQUFvQixDQUFDLElBQUksRUFBTyxTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFBO1lBQ2xFLEtBQUssc0RBQXNEO2dCQUN2RCxPQUFPLElBQUkscUJBQVMsQ0FBQyxJQUFJLEVBQU8sU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQTtZQUN2RDtnQkFDSSxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ3hEO0lBQ0wsQ0FBQztDQUNKLENBQUM7QUFDRixNQUFNLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUFDLGNBQWMsRUFBRSwrQkFBK0IsRUFBRSxPQUFPLENBQUMsQ0FBQSJ9