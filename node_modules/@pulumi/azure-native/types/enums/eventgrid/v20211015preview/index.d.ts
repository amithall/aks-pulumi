export declare const AdvancedFilterOperatorType: {
    readonly NumberIn: "NumberIn";
    readonly NumberNotIn: "NumberNotIn";
    readonly NumberLessThan: "NumberLessThan";
    readonly NumberGreaterThan: "NumberGreaterThan";
    readonly NumberLessThanOrEquals: "NumberLessThanOrEquals";
    readonly NumberGreaterThanOrEquals: "NumberGreaterThanOrEquals";
    readonly BoolEquals: "BoolEquals";
    readonly StringIn: "StringIn";
    readonly StringNotIn: "StringNotIn";
    readonly StringBeginsWith: "StringBeginsWith";
    readonly StringEndsWith: "StringEndsWith";
    readonly StringContains: "StringContains";
    readonly NumberInRange: "NumberInRange";
    readonly NumberNotInRange: "NumberNotInRange";
    readonly StringNotBeginsWith: "StringNotBeginsWith";
    readonly StringNotEndsWith: "StringNotEndsWith";
    readonly StringNotContains: "StringNotContains";
    readonly IsNullOrUndefined: "IsNullOrUndefined";
    readonly IsNotNull: "IsNotNull";
};
/**
 * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
 */
export declare type AdvancedFilterOperatorType = (typeof AdvancedFilterOperatorType)[keyof typeof AdvancedFilterOperatorType];
export declare const ChannelProvisioningState: {
    readonly Creating: "Creating";
    readonly Updating: "Updating";
    readonly Deleting: "Deleting";
    readonly Succeeded: "Succeeded";
    readonly Canceled: "Canceled";
    readonly Failed: "Failed";
};
/**
 * Provisioning state of the channel.
 */
export declare type ChannelProvisioningState = (typeof ChannelProvisioningState)[keyof typeof ChannelProvisioningState];
export declare const ChannelType: {
    readonly PartnerTopic: "PartnerTopic";
    readonly PartnerDestination: "PartnerDestination";
};
/**
 * The type of the event channel which represents the  direction flow of events.
 */
export declare type ChannelType = (typeof ChannelType)[keyof typeof ChannelType];
export declare const DataResidencyBoundary: {
    readonly WithinGeopair: "WithinGeopair";
    readonly WithinRegion: "WithinRegion";
};
/**
 * Data Residency Boundary of the resource.
 */
export declare type DataResidencyBoundary = (typeof DataResidencyBoundary)[keyof typeof DataResidencyBoundary];
export declare const DeadLetterEndPointType: {
    readonly StorageBlob: "StorageBlob";
};
/**
 * Type of the endpoint for the dead letter destination
 */
export declare type DeadLetterEndPointType = (typeof DeadLetterEndPointType)[keyof typeof DeadLetterEndPointType];
export declare const DeliveryAttributeMappingType: {
    readonly Static: "Static";
    readonly Dynamic: "Dynamic";
};
/**
 * Type of the delivery attribute or header name.
 */
export declare type DeliveryAttributeMappingType = (typeof DeliveryAttributeMappingType)[keyof typeof DeliveryAttributeMappingType];
export declare const EndpointType: {
    readonly WebHook: "WebHook";
    readonly EventHub: "EventHub";
    readonly StorageQueue: "StorageQueue";
    readonly HybridConnection: "HybridConnection";
    readonly ServiceBusQueue: "ServiceBusQueue";
    readonly ServiceBusTopic: "ServiceBusTopic";
    readonly AzureFunction: "AzureFunction";
    readonly PartnerDestination: "PartnerDestination";
};
/**
 * Type of the endpoint for the event subscription destination.
 */
export declare type EndpointType = (typeof EndpointType)[keyof typeof EndpointType];
export declare const EventDefinitionKind: {
    readonly Inline: "Inline";
};
/**
 * The kind of event type used.
 */
export declare type EventDefinitionKind = (typeof EventDefinitionKind)[keyof typeof EventDefinitionKind];
export declare const EventDeliverySchema: {
    readonly EventGridSchema: "EventGridSchema";
    readonly CustomInputSchema: "CustomInputSchema";
    readonly CloudEventSchemaV1_0: "CloudEventSchemaV1_0";
};
/**
 * The event delivery schema for the event subscription.
 */
export declare type EventDeliverySchema = (typeof EventDeliverySchema)[keyof typeof EventDeliverySchema];
export declare const EventSubscriptionIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
};
/**
 * The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.
 */
export declare type EventSubscriptionIdentityType = (typeof EventSubscriptionIdentityType)[keyof typeof EventSubscriptionIdentityType];
export declare const IdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned";
};
/**
 * The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.
 */
export declare type IdentityType = (typeof IdentityType)[keyof typeof IdentityType];
export declare const InputSchema: {
    readonly EventGridSchema: "EventGridSchema";
    readonly CustomEventSchema: "CustomEventSchema";
    readonly CloudEventSchemaV1_0: "CloudEventSchemaV1_0";
};
/**
 * This determines the format that Event Grid should expect for incoming events published to the topic.
 */
export declare type InputSchema = (typeof InputSchema)[keyof typeof InputSchema];
export declare const InputSchemaMappingType: {
    readonly Json: "Json";
};
/**
 * Type of the custom mapping
 */
export declare type InputSchemaMappingType = (typeof InputSchemaMappingType)[keyof typeof InputSchemaMappingType];
export declare const IpActionType: {
    readonly Allow: "Allow";
};
/**
 * Action to perform based on the match or no match of the IpMask.
 */
export declare type IpActionType = (typeof IpActionType)[keyof typeof IpActionType];
export declare const PartnerClientAuthenticationType: {
    readonly AzureAD: "AzureAD";
};
/**
 * Type of client authentication
 */
export declare type PartnerClientAuthenticationType = (typeof PartnerClientAuthenticationType)[keyof typeof PartnerClientAuthenticationType];
export declare const PartnerConfigurationProvisioningState: {
    readonly Creating: "Creating";
    readonly Updating: "Updating";
    readonly Deleting: "Deleting";
    readonly Succeeded: "Succeeded";
    readonly Canceled: "Canceled";
    readonly Failed: "Failed";
};
/**
 * Provisioning state of the partner configuration.
 */
export declare type PartnerConfigurationProvisioningState = (typeof PartnerConfigurationProvisioningState)[keyof typeof PartnerConfigurationProvisioningState];
export declare const PartnerDestinationActivationState: {
    readonly NeverActivated: "NeverActivated";
    readonly Activated: "Activated";
};
/**
 * Activation state of the partner destination.
 */
export declare type PartnerDestinationActivationState = (typeof PartnerDestinationActivationState)[keyof typeof PartnerDestinationActivationState];
export declare const PartnerDestinationProvisioningState: {
    readonly Creating: "Creating";
    readonly Updating: "Updating";
    readonly Deleting: "Deleting";
    readonly Succeeded: "Succeeded";
    readonly Canceled: "Canceled";
    readonly Failed: "Failed";
};
/**
 * Provisioning state of the partner destination.
 */
export declare type PartnerDestinationProvisioningState = (typeof PartnerDestinationProvisioningState)[keyof typeof PartnerDestinationProvisioningState];
export declare const PartnerEndpointType: {
    readonly WebHook: "WebHook";
};
/**
 * Type of the endpoint for the partner destination
 */
export declare type PartnerEndpointType = (typeof PartnerEndpointType)[keyof typeof PartnerEndpointType];
export declare const PartnerRegistrationVisibilityState: {
    readonly Hidden: "Hidden";
    readonly PublicPreview: "PublicPreview";
    readonly GenerallyAvailable: "GenerallyAvailable";
};
/**
 * Visibility state of the partner registration.
 */
export declare type PartnerRegistrationVisibilityState = (typeof PartnerRegistrationVisibilityState)[keyof typeof PartnerRegistrationVisibilityState];
export declare const PartnerTopicActivationState: {
    readonly NeverActivated: "NeverActivated";
    readonly Activated: "Activated";
    readonly Deactivated: "Deactivated";
};
/**
 * Activation state of the partner topic.
 */
export declare type PartnerTopicActivationState = (typeof PartnerTopicActivationState)[keyof typeof PartnerTopicActivationState];
export declare const PartnerTopicRoutingMode: {
    readonly SourceEventAttribute: "SourceEventAttribute";
    readonly ChannelNameHeader: "ChannelNameHeader";
};
/**
 * This determines if events published to this partner namespace should use the source attribute in the event payload
 * or use the channel name in the header when matching to the partner topic. If none is specified, source attribute routing will be used to match the partner topic.
 */
export declare type PartnerTopicRoutingMode = (typeof PartnerTopicRoutingMode)[keyof typeof PartnerTopicRoutingMode];
export declare const PersistedConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
    readonly Disconnected: "Disconnected";
};
/**
 * Status of the connection.
 */
export declare type PersistedConnectionStatus = (typeof PersistedConnectionStatus)[keyof typeof PersistedConnectionStatus];
export declare const PublicNetworkAccess: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * This determines if traffic is allowed over public network. By default it is enabled.
 * You can further restrict to specific IPs by configuring <seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.TopicProperties.InboundIpRules" />
 */
export declare type PublicNetworkAccess = (typeof PublicNetworkAccess)[keyof typeof PublicNetworkAccess];
export declare const ReadinessState: {
    readonly NeverActivated: "NeverActivated";
    readonly Activated: "Activated";
};
/**
 * The readiness state of the corresponding partner topic.
 */
export declare type ReadinessState = (typeof ReadinessState)[keyof typeof ReadinessState];
export declare const ResourceKind: {
    readonly Azure: "Azure";
    readonly AzureArc: "AzureArc";
};
/**
 * Kind of the resource.
 */
export declare type ResourceKind = (typeof ResourceKind)[keyof typeof ResourceKind];
export declare const ResourceProvisioningState: {
    readonly Creating: "Creating";
    readonly Updating: "Updating";
    readonly Deleting: "Deleting";
    readonly Succeeded: "Succeeded";
    readonly Canceled: "Canceled";
    readonly Failed: "Failed";
};
/**
 * Provisioning state of the Private Endpoint Connection.
 */
export declare type ResourceProvisioningState = (typeof ResourceProvisioningState)[keyof typeof ResourceProvisioningState];
export declare const Sku: {
    readonly Basic: "Basic";
    readonly Premium: "Premium";
};
/**
 * The Sku name of the resource. The possible values are: Basic or Premium.
 */
export declare type Sku = (typeof Sku)[keyof typeof Sku];
