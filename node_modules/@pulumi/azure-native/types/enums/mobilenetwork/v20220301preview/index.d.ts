export declare const CoreNetworkType: {
    /**
     * 5G core
     */
    readonly CoreNetworkType_5GC: "5GC";
    /**
     * EPC / 4G core
     */
    readonly EPC: "EPC";
};
/**
 * The core network technology generation.
 */
export declare type CoreNetworkType = (typeof CoreNetworkType)[keyof typeof CoreNetworkType];
export declare const CreatedByType: {
    readonly User: "User";
    readonly Application: "Application";
    readonly ManagedIdentity: "ManagedIdentity";
    readonly Key: "Key";
};
/**
 * The type of identity that last modified the resource.
 */
export declare type CreatedByType = (typeof CreatedByType)[keyof typeof CreatedByType];
export declare const NaptEnabled: {
    /**
     * NAPT is enabled
     */
    readonly Enabled: "Enabled";
    /**
     * NAPT is disabled
     */
    readonly Disabled: "Disabled";
};
/**
 * Whether NAPT is enabled for connections to this attachedDataNetwork.
 */
export declare type NaptEnabled = (typeof NaptEnabled)[keyof typeof NaptEnabled];
export declare const PduSessionType: {
    readonly IPv4: "IPv4";
    readonly IPv6: "IPv6";
};
/**
 * The default PDU session type, which is used if the UE does not request a specific session type.
 */
export declare type PduSessionType = (typeof PduSessionType)[keyof typeof PduSessionType];
export declare const PreemptionCapability: {
    /**
     * Cannot preempt
     */
    readonly NotPreempt: "NotPreempt";
    /**
     * May preempt
     */
    readonly MayPreempt: "MayPreempt";
};
/**
 * Default QoS Flow preemption capability.  The Preemption Capability of a QoS Flow controls whether it can preempt another QoS Flow with a lower priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
 */
export declare type PreemptionCapability = (typeof PreemptionCapability)[keyof typeof PreemptionCapability];
export declare const PreemptionVulnerability: {
    /**
     * Cannot be preempted
     */
    readonly NotPreemptable: "NotPreemptable";
    /**
     * May be preempted
     */
    readonly Preemptable: "Preemptable";
};
/**
 * Default QoS Flow preemption vulnerability.  The Preemption Vulnerability of a QoS Flow controls whether it can be preempted by QoS Flow with a higher priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
 */
export declare type PreemptionVulnerability = (typeof PreemptionVulnerability)[keyof typeof PreemptionVulnerability];
export declare const SdfDirection: {
    /**
     * Traffic flowing from the UE to the data network.
     */
    readonly Uplink: "Uplink";
    /**
     * Traffic flowing from the data network to the UE.
     */
    readonly Downlink: "Downlink";
    /**
     * Traffic flowing both to and from the UE.
     */
    readonly Bidirectional: "Bidirectional";
};
/**
 * The direction of this flow.
 */
export declare type SdfDirection = (typeof SdfDirection)[keyof typeof SdfDirection];
export declare const TrafficControlPermission: {
    /**
     * Traffic matching this rule is allowed to flow.
     */
    readonly Enabled: "Enabled";
    /**
     * Traffic matching this rule is not allowed to flow.
     */
    readonly Blocked: "Blocked";
};
/**
 * Determines whether flows that match this PCC Rule are permitted.
 */
export declare type TrafficControlPermission = (typeof TrafficControlPermission)[keyof typeof TrafficControlPermission];
