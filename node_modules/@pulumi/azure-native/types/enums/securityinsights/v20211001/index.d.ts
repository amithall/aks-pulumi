export declare const ActionType: {
    /**
     * Modify an object's properties
     */
    readonly ModifyProperties: "ModifyProperties";
    /**
     * Run a playbook on an object
     */
    readonly RunPlaybook: "RunPlaybook";
};
/**
 * The type of the automation rule action
 */
export declare type ActionType = (typeof ActionType)[keyof typeof ActionType];
export declare const AlertDetail: {
    /**
     * Alert display name
     */
    readonly DisplayName: "DisplayName";
    /**
     * Alert severity
     */
    readonly Severity: "Severity";
};
/**
 * Alert detail
 */
export declare type AlertDetail = (typeof AlertDetail)[keyof typeof AlertDetail];
export declare const AlertRuleKind: {
    readonly Scheduled: "Scheduled";
    readonly MicrosoftSecurityIncidentCreation: "MicrosoftSecurityIncidentCreation";
    readonly Fusion: "Fusion";
};
/**
 * The alert rule kind
 */
export declare type AlertRuleKind = (typeof AlertRuleKind)[keyof typeof AlertRuleKind];
export declare const AlertSeverity: {
    /**
     * High severity
     */
    readonly High: "High";
    /**
     * Medium severity
     */
    readonly Medium: "Medium";
    /**
     * Low severity
     */
    readonly Low: "Low";
    /**
     * Informational severity
     */
    readonly Informational: "Informational";
};
/**
 * The severity for alerts created by this alert rule.
 */
export declare type AlertSeverity = (typeof AlertSeverity)[keyof typeof AlertSeverity];
export declare const AttackTactic: {
    readonly InitialAccess: "InitialAccess";
    readonly Execution: "Execution";
    readonly Persistence: "Persistence";
    readonly PrivilegeEscalation: "PrivilegeEscalation";
    readonly DefenseEvasion: "DefenseEvasion";
    readonly CredentialAccess: "CredentialAccess";
    readonly Discovery: "Discovery";
    readonly LateralMovement: "LateralMovement";
    readonly Collection: "Collection";
    readonly Exfiltration: "Exfiltration";
    readonly CommandAndControl: "CommandAndControl";
    readonly Impact: "Impact";
    readonly PreAttack: "PreAttack";
};
/**
 * The severity for alerts created by this alert rule.
 */
export declare type AttackTactic = (typeof AttackTactic)[keyof typeof AttackTactic];
export declare const AutomationRulePropertyConditionSupportedOperator: {
    /**
     * Evaluates if the property equals at least one of the condition values
     */
    readonly Equals: "Equals";
    /**
     * Evaluates if the property does not equal any of the condition values
     */
    readonly NotEquals: "NotEquals";
    /**
     * Evaluates if the property contains at least one of the condition values
     */
    readonly Contains: "Contains";
    /**
     * Evaluates if the property does not contain any of the condition values
     */
    readonly NotContains: "NotContains";
    /**
     * Evaluates if the property starts with any of the condition values
     */
    readonly StartsWith: "StartsWith";
    /**
     * Evaluates if the property does not start with any of the condition values
     */
    readonly NotStartsWith: "NotStartsWith";
    /**
     * Evaluates if the property ends with any of the condition values
     */
    readonly EndsWith: "EndsWith";
    /**
     * Evaluates if the property does not end with any of the condition values
     */
    readonly NotEndsWith: "NotEndsWith";
};
export declare type AutomationRulePropertyConditionSupportedOperator = (typeof AutomationRulePropertyConditionSupportedOperator)[keyof typeof AutomationRulePropertyConditionSupportedOperator];
export declare const AutomationRulePropertyConditionSupportedProperty: {
    /**
     * The title of the incident
     */
    readonly IncidentTitle: "IncidentTitle";
    /**
     * The description of the incident
     */
    readonly IncidentDescription: "IncidentDescription";
    /**
     * The severity of the incident
     */
    readonly IncidentSeverity: "IncidentSeverity";
    /**
     * The status of the incident
     */
    readonly IncidentStatus: "IncidentStatus";
    /**
     * The related Analytic rule ids of the incident
     */
    readonly IncidentRelatedAnalyticRuleIds: "IncidentRelatedAnalyticRuleIds";
    /**
     * The tactics of the incident
     */
    readonly IncidentTactics: "IncidentTactics";
    /**
     * The labels of the incident
     */
    readonly IncidentLabel: "IncidentLabel";
    /**
     * The provider name of the incident
     */
    readonly IncidentProviderName: "IncidentProviderName";
    /**
     * The account Azure Active Directory tenant id
     */
    readonly AccountAadTenantId: "AccountAadTenantId";
    /**
     * The account Azure Active Directory user id
     */
    readonly AccountAadUserId: "AccountAadUserId";
    /**
     * The account name
     */
    readonly AccountName: "AccountName";
    /**
     * The account NetBIOS domain name
     */
    readonly AccountNTDomain: "AccountNTDomain";
    /**
     * The account Azure Active Directory Passport User ID
     */
    readonly AccountPUID: "AccountPUID";
    /**
     * The account security identifier
     */
    readonly AccountSid: "AccountSid";
    /**
     * The account unique identifier
     */
    readonly AccountObjectGuid: "AccountObjectGuid";
    /**
     * The account user principal name suffix
     */
    readonly AccountUPNSuffix: "AccountUPNSuffix";
    /**
     * The name of the product of the alert
     */
    readonly AlertProductNames: "AlertProductNames";
    /**
     * The Azure resource id
     */
    readonly AzureResourceResourceId: "AzureResourceResourceId";
    /**
     * The Azure resource subscription id
     */
    readonly AzureResourceSubscriptionId: "AzureResourceSubscriptionId";
    /**
     * The cloud application identifier
     */
    readonly CloudApplicationAppId: "CloudApplicationAppId";
    /**
     * The cloud application name
     */
    readonly CloudApplicationAppName: "CloudApplicationAppName";
    /**
     * The dns record domain name
     */
    readonly DNSDomainName: "DNSDomainName";
    /**
     * The file directory full path
     */
    readonly FileDirectory: "FileDirectory";
    /**
     * The file name without path
     */
    readonly FileName: "FileName";
    /**
     * The file hash value
     */
    readonly FileHashValue: "FileHashValue";
    /**
     * The host Azure resource id
     */
    readonly HostAzureID: "HostAzureID";
    /**
     * The host name without domain
     */
    readonly HostName: "HostName";
    /**
     * The host NetBIOS name
     */
    readonly HostNetBiosName: "HostNetBiosName";
    /**
     * The host NT domain
     */
    readonly HostNTDomain: "HostNTDomain";
    /**
     * The host operating system
     */
    readonly HostOSVersion: "HostOSVersion";
    /**
     * "The IoT device id
     */
    readonly IoTDeviceId: "IoTDeviceId";
    /**
     * The IoT device name
     */
    readonly IoTDeviceName: "IoTDeviceName";
    /**
     * The IoT device type
     */
    readonly IoTDeviceType: "IoTDeviceType";
    /**
     * The IoT device vendor
     */
    readonly IoTDeviceVendor: "IoTDeviceVendor";
    /**
     * The IoT device model
     */
    readonly IoTDeviceModel: "IoTDeviceModel";
    /**
     * The IoT device operating system
     */
    readonly IoTDeviceOperatingSystem: "IoTDeviceOperatingSystem";
    /**
     * The IP address
     */
    readonly IPAddress: "IPAddress";
    /**
     * The mailbox display name
     */
    readonly MailboxDisplayName: "MailboxDisplayName";
    /**
     * The mailbox primary address
     */
    readonly MailboxPrimaryAddress: "MailboxPrimaryAddress";
    /**
     * The mailbox user principal name
     */
    readonly MailboxUPN: "MailboxUPN";
    /**
     * The mail message delivery action
     */
    readonly MailMessageDeliveryAction: "MailMessageDeliveryAction";
    /**
     * The mail message delivery location
     */
    readonly MailMessageDeliveryLocation: "MailMessageDeliveryLocation";
    /**
     * The mail message recipient
     */
    readonly MailMessageRecipient: "MailMessageRecipient";
    /**
     * The mail message sender IP address
     */
    readonly MailMessageSenderIP: "MailMessageSenderIP";
    /**
     * The mail message subject
     */
    readonly MailMessageSubject: "MailMessageSubject";
    /**
     * The mail message P1 sender
     */
    readonly MailMessageP1Sender: "MailMessageP1Sender";
    /**
     * The mail message P2 sender
     */
    readonly MailMessageP2Sender: "MailMessageP2Sender";
    /**
     * The malware category
     */
    readonly MalwareCategory: "MalwareCategory";
    /**
     * The malware name
     */
    readonly MalwareName: "MalwareName";
    /**
     * The process execution command line
     */
    readonly ProcessCommandLine: "ProcessCommandLine";
    /**
     * The process id
     */
    readonly ProcessId: "ProcessId";
    /**
     * The registry key path
     */
    readonly RegistryKey: "RegistryKey";
    /**
     * The registry key value in string formatted representation
     */
    readonly RegistryValueData: "RegistryValueData";
    /**
     * The url
     */
    readonly Url: "Url";
};
/**
 * The property to evaluate in an automation rule property condition
 */
export declare type AutomationRulePropertyConditionSupportedProperty = (typeof AutomationRulePropertyConditionSupportedProperty)[keyof typeof AutomationRulePropertyConditionSupportedProperty];
export declare const ConditionType: {
    /**
     * Evaluate an object property value
     */
    readonly Property: "Property";
};
export declare type ConditionType = (typeof ConditionType)[keyof typeof ConditionType];
export declare const DataConnectorKind: {
    readonly AzureActiveDirectory: "AzureActiveDirectory";
    readonly AzureSecurityCenter: "AzureSecurityCenter";
    readonly MicrosoftCloudAppSecurity: "MicrosoftCloudAppSecurity";
    readonly ThreatIntelligence: "ThreatIntelligence";
    readonly Office365: "Office365";
    readonly AmazonWebServicesCloudTrail: "AmazonWebServicesCloudTrail";
    readonly AzureAdvancedThreatProtection: "AzureAdvancedThreatProtection";
    readonly MicrosoftDefenderAdvancedThreatProtection: "MicrosoftDefenderAdvancedThreatProtection";
};
/**
 * The data connector kind
 */
export declare type DataConnectorKind = (typeof DataConnectorKind)[keyof typeof DataConnectorKind];
export declare const DataTypeState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Describe whether this data type connection is enabled or not.
 */
export declare type DataTypeState = (typeof DataTypeState)[keyof typeof DataTypeState];
export declare const EntityMappingType: {
    /**
     * User account entity type
     */
    readonly Account: "Account";
    /**
     * Host entity type
     */
    readonly Host: "Host";
    /**
     * IP address entity type
     */
    readonly IP: "IP";
    /**
     * Malware entity type
     */
    readonly Malware: "Malware";
    /**
     * System file entity type
     */
    readonly File: "File";
    /**
     * Process entity type
     */
    readonly Process: "Process";
    /**
     * Cloud app entity type
     */
    readonly CloudApplication: "CloudApplication";
    /**
     * DNS entity type
     */
    readonly DNS: "DNS";
    /**
     * Azure resource entity type
     */
    readonly AzureResource: "AzureResource";
    /**
     * File-hash entity type
     */
    readonly FileHash: "FileHash";
    /**
     * Registry key entity type
     */
    readonly RegistryKey: "RegistryKey";
    /**
     * Registry value entity type
     */
    readonly RegistryValue: "RegistryValue";
    /**
     * Security group entity type
     */
    readonly SecurityGroup: "SecurityGroup";
    /**
     * URL entity type
     */
    readonly URL: "URL";
    /**
     * Mailbox entity type
     */
    readonly Mailbox: "Mailbox";
    /**
     * Mail cluster entity type
     */
    readonly MailCluster: "MailCluster";
    /**
     * Mail message entity type
     */
    readonly MailMessage: "MailMessage";
    /**
     * Submission mail entity type
     */
    readonly SubmissionMail: "SubmissionMail";
};
/**
 * The V3 type of the mapped entity
 */
export declare type EntityMappingType = (typeof EntityMappingType)[keyof typeof EntityMappingType];
export declare const EventGroupingAggregationKind: {
    readonly SingleAlert: "SingleAlert";
    readonly AlertPerResult: "AlertPerResult";
};
/**
 * The event grouping aggregation kinds
 */
export declare type EventGroupingAggregationKind = (typeof EventGroupingAggregationKind)[keyof typeof EventGroupingAggregationKind];
export declare const IncidentClassification: {
    /**
     * Incident classification was undetermined
     */
    readonly Undetermined: "Undetermined";
    /**
     * Incident was true positive
     */
    readonly TruePositive: "TruePositive";
    /**
     * Incident was benign positive
     */
    readonly BenignPositive: "BenignPositive";
    /**
     * Incident was false positive
     */
    readonly FalsePositive: "FalsePositive";
};
/**
 * The reason the incident was closed
 */
export declare type IncidentClassification = (typeof IncidentClassification)[keyof typeof IncidentClassification];
export declare const IncidentClassificationReason: {
    /**
     * Classification reason was suspicious activity
     */
    readonly SuspiciousActivity: "SuspiciousActivity";
    /**
     * Classification reason was suspicious but expected
     */
    readonly SuspiciousButExpected: "SuspiciousButExpected";
    /**
     * Classification reason was incorrect alert logic
     */
    readonly IncorrectAlertLogic: "IncorrectAlertLogic";
    /**
     * Classification reason was inaccurate data
     */
    readonly InaccurateData: "InaccurateData";
};
/**
 * The classification reason the incident was closed with
 */
export declare type IncidentClassificationReason = (typeof IncidentClassificationReason)[keyof typeof IncidentClassificationReason];
export declare const IncidentSeverity: {
    /**
     * High severity
     */
    readonly High: "High";
    /**
     * Medium severity
     */
    readonly Medium: "Medium";
    /**
     * Low severity
     */
    readonly Low: "Low";
    /**
     * Informational severity
     */
    readonly Informational: "Informational";
};
/**
 * The severity of the incident
 */
export declare type IncidentSeverity = (typeof IncidentSeverity)[keyof typeof IncidentSeverity];
export declare const IncidentStatus: {
    /**
     * An active incident which isn't being handled currently
     */
    readonly New: "New";
    /**
     * An active incident which is being handled
     */
    readonly Active: "Active";
    /**
     * A non-active incident
     */
    readonly Closed: "Closed";
};
/**
 * The status of the incident
 */
export declare type IncidentStatus = (typeof IncidentStatus)[keyof typeof IncidentStatus];
export declare const MatchingMethod: {
    /**
     * Grouping alerts into a single incident if all the entities match
     */
    readonly AllEntities: "AllEntities";
    /**
     * Grouping any alerts triggered by this rule into a single incident
     */
    readonly AnyAlert: "AnyAlert";
    /**
     * Grouping alerts into a single incident if the selected entities, custom details and alert details match
     */
    readonly Selected: "Selected";
};
/**
 * Grouping matching method. When method is Selected at least one of groupByEntities, groupByAlertDetails, groupByCustomDetails must be provided and not empty.
 */
export declare type MatchingMethod = (typeof MatchingMethod)[keyof typeof MatchingMethod];
export declare const MicrosoftSecurityProductName: {
    readonly Microsoft_Cloud_App_Security: "Microsoft Cloud App Security";
    readonly Azure_Security_Center: "Azure Security Center";
    readonly Azure_Advanced_Threat_Protection: "Azure Advanced Threat Protection";
    readonly Azure_Active_Directory_Identity_Protection: "Azure Active Directory Identity Protection";
    readonly Azure_Security_Center_for_IoT: "Azure Security Center for IoT";
};
/**
 * The alerts' productName on which the cases will be generated
 */
export declare type MicrosoftSecurityProductName = (typeof MicrosoftSecurityProductName)[keyof typeof MicrosoftSecurityProductName];
export declare const OwnerType: {
    /**
     * The incident owner type is unknown
     */
    readonly Unknown: "Unknown";
    /**
     * The incident owner type is an AAD user
     */
    readonly User: "User";
    /**
     * The incident owner type is an AAD group
     */
    readonly Group: "Group";
};
/**
 * The type of the owner the incident is assigned to.
 */
export declare type OwnerType = (typeof OwnerType)[keyof typeof OwnerType];
export declare const Source: {
    readonly Local_file: "Local file";
    readonly Remote_storage: "Remote storage";
};
/**
 * The source of the watchlist
 */
export declare type Source = (typeof Source)[keyof typeof Source];
export declare const ThreatIntelligenceResourceInnerKind: {
    /**
     * Entity represents threat intelligence indicator in the system.
     */
    readonly Indicator: "indicator";
};
/**
 * The kind of the entity.
 */
export declare type ThreatIntelligenceResourceInnerKind = (typeof ThreatIntelligenceResourceInnerKind)[keyof typeof ThreatIntelligenceResourceInnerKind];
export declare const TriggerOperator: {
    readonly GreaterThan: "GreaterThan";
    readonly LessThan: "LessThan";
    readonly Equal: "Equal";
    readonly NotEqual: "NotEqual";
};
/**
 * The operation against the threshold that triggers alert rule.
 */
export declare type TriggerOperator = (typeof TriggerOperator)[keyof typeof TriggerOperator];
export declare const TriggersOn: {
    /**
     * Trigger on Incidents
     */
    readonly Incidents: "Incidents";
};
export declare type TriggersOn = (typeof TriggersOn)[keyof typeof TriggersOn];
export declare const TriggersWhen: {
    /**
     * Trigger on created objects
     */
    readonly Created: "Created";
};
export declare type TriggersWhen = (typeof TriggersWhen)[keyof typeof TriggersWhen];
