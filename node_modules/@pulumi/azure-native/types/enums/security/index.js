"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserImpact = exports.UnmaskedIpLoggingStatus = exports.Threats = exports.SupportedCloudEnum = exports.StatusReason = exports.Status = exports.State = exports.StandardSupportedClouds = exports.Source = exports.SeverityEnum = exports.Severity = exports.SecuritySolutionStatus = exports.RuleState = exports.Roles = exports.RecommendationType = exports.RecommendationConfigStatus = exports.Protocol = exports.PropertyType = exports.OrganizationMembershipType = exports.Operator = exports.OfferingType = exports.MinimalSeverity = exports.ImplementationEffort = exports.ExportData = exports.EventSource = exports.DataSource = exports.CloudName = exports.Categories = exports.AutoProvision = exports.AuthenticationType = exports.AssessmentType = exports.AssessmentStatusCode = exports.AdditionalWorkspaceType = exports.AdditionalWorkspaceDataType = exports.ActionType = exports.v20211201preview = exports.v20210801preview = exports.v20210701preview = exports.v20210601 = exports.v20200101preview = exports.v20200101 = exports.v20190801 = exports.v20190101preview = exports.v20170801preview = exports.v20150601preview = void 0;
// Export sub-modules:
const v20150601preview = require("./v20150601preview");
exports.v20150601preview = v20150601preview;
const v20170801preview = require("./v20170801preview");
exports.v20170801preview = v20170801preview;
const v20190101preview = require("./v20190101preview");
exports.v20190101preview = v20190101preview;
const v20190801 = require("./v20190801");
exports.v20190801 = v20190801;
const v20200101 = require("./v20200101");
exports.v20200101 = v20200101;
const v20200101preview = require("./v20200101preview");
exports.v20200101preview = v20200101preview;
const v20210601 = require("./v20210601");
exports.v20210601 = v20210601;
const v20210701preview = require("./v20210701preview");
exports.v20210701preview = v20210701preview;
const v20210801preview = require("./v20210801preview");
exports.v20210801preview = v20210801preview;
const v20211201preview = require("./v20211201preview");
exports.v20211201preview = v20211201preview;
exports.ActionType = {
    LogicApp: "LogicApp",
    EventHub: "EventHub",
    Workspace: "Workspace",
};
exports.AdditionalWorkspaceDataType = {
    Alerts: "Alerts",
    RawEvents: "RawEvents",
};
exports.AdditionalWorkspaceType = {
    Sentinel: "Sentinel",
};
exports.AssessmentStatusCode = {
    /**
     * The resource is healthy
     */
    Healthy: "Healthy",
    /**
     * The resource has a security issue that needs to be addressed
     */
    Unhealthy: "Unhealthy",
    /**
     * Assessment for this resource did not happen
     */
    NotApplicable: "NotApplicable",
};
exports.AssessmentType = {
    /**
     * Microsoft Defender for Cloud managed assessments
     */
    BuiltIn: "BuiltIn",
    /**
     * User defined policies that are automatically ingested from Azure Policy to Microsoft Defender for Cloud
     */
    CustomPolicy: "CustomPolicy",
    /**
     * User assessments pushed directly by the user or other third party to Microsoft Defender for Cloud
     */
    CustomerManaged: "CustomerManaged",
    /**
     * An assessment that was created by a verified 3rd party if the user connected it to ASC
     */
    VerifiedPartner: "VerifiedPartner",
};
exports.AuthenticationType = {
    /**
     * AWS cloud account connector user credentials authentication
     */
    AwsCreds: "awsCreds",
    /**
     * AWS account connector assume role authentication
     */
    AwsAssumeRole: "awsAssumeRole",
    /**
     * GCP account connector service to service authentication
     */
    GcpCredentials: "gcpCredentials",
};
exports.AutoProvision = {
    /**
     * Install missing Azure Arc agents on machines automatically
     */
    On: "On",
    /**
     * Do not install Azure Arc agent on the machines automatically
     */
    Off: "Off",
};
exports.Categories = {
    Compute: "Compute",
    Networking: "Networking",
    Data: "Data",
    IdentityAndAccess: "IdentityAndAccess",
    IoT: "IoT",
};
exports.CloudName = {
    Azure: "Azure",
    AWS: "AWS",
    GCP: "GCP",
};
exports.DataSource = {
    /**
     * Devices twin data
     */
    TwinData: "TwinData",
};
exports.EventSource = {
    Assessments: "Assessments",
    AssessmentsSnapshot: "AssessmentsSnapshot",
    SubAssessments: "SubAssessments",
    SubAssessmentsSnapshot: "SubAssessmentsSnapshot",
    Alerts: "Alerts",
    SecureScores: "SecureScores",
    SecureScoresSnapshot: "SecureScoresSnapshot",
    SecureScoreControls: "SecureScoreControls",
    SecureScoreControlsSnapshot: "SecureScoreControlsSnapshot",
    RegulatoryComplianceAssessment: "RegulatoryComplianceAssessment",
    RegulatoryComplianceAssessmentSnapshot: "RegulatoryComplianceAssessmentSnapshot",
};
exports.ExportData = {
    /**
     * Agent raw events
     */
    RawEvents: "RawEvents",
};
exports.ImplementationEffort = {
    Low: "Low",
    Moderate: "Moderate",
    High: "High",
};
exports.MinimalSeverity = {
    /**
     * Get notifications on new alerts with High severity
     */
    High: "High",
    /**
     * Get notifications on new alerts with medium or high severity
     */
    Medium: "Medium",
    /**
     * Don't get notifications on new alerts with low, medium or high severity
     */
    Low: "Low",
};
exports.OfferingType = {
    CspmMonitorAws: "CspmMonitorAws",
    DefenderForContainersAws: "DefenderForContainersAws",
    DefenderForServersAws: "DefenderForServersAws",
    InformationProtectionAws: "InformationProtectionAws",
};
exports.Operator = {
    /**
     * Applies for decimal and non-decimal operands
     */
    Equals: "Equals",
    /**
     * Applies only for decimal operands
     */
    GreaterThan: "GreaterThan",
    /**
     * Applies only for decimal operands
     */
    GreaterThanOrEqualTo: "GreaterThanOrEqualTo",
    /**
     * Applies only for decimal operands
     */
    LesserThan: "LesserThan",
    /**
     * Applies only for decimal operands
     */
    LesserThanOrEqualTo: "LesserThanOrEqualTo",
    /**
     * Applies  for decimal and non-decimal operands
     */
    NotEquals: "NotEquals",
    /**
     * Applies only for non-decimal operands
     */
    Contains: "Contains",
    /**
     * Applies only for non-decimal operands
     */
    StartsWith: "StartsWith",
    /**
     * Applies only for non-decimal operands
     */
    EndsWith: "EndsWith",
};
exports.OrganizationMembershipType = {
    Member: "Member",
    Organization: "Organization",
};
exports.PropertyType = {
    String: "String",
    Integer: "Integer",
    Number: "Number",
    Boolean: "Boolean",
};
exports.Protocol = {
    TCP: "TCP",
    UDP: "UDP",
    All: "*",
};
exports.RecommendationConfigStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.RecommendationType = {
    /**
     * Authentication schema used for pull an edge module from an ACR repository does not use Service Principal Authentication.
     */
    IoT_ACRAuthentication: "IoT_ACRAuthentication",
    /**
     * IoT agent message size capacity is currently underutilized, causing an increase in the number of sent messages. Adjust message intervals for better utilization.
     */
    IoT_AgentSendsUnutilizedMessages: "IoT_AgentSendsUnutilizedMessages",
    /**
     * Identified security related system configuration issues.
     */
    IoT_Baseline: "IoT_Baseline",
    /**
     * You can optimize Edge Hub memory usage by turning off protocol heads for any protocols not used by Edge modules in your solution.
     */
    IoT_EdgeHubMemOptimize: "IoT_EdgeHubMemOptimize",
    /**
     * Logging is disabled for this edge module.
     */
    IoT_EdgeLoggingOptions: "IoT_EdgeLoggingOptions",
    /**
     * A minority within a device security group has inconsistent Edge Module settings with the rest of their group.
     */
    IoT_InconsistentModuleSettings: "IoT_InconsistentModuleSettings",
    /**
     * Install the Azure Security of Things Agent.
     */
    IoT_InstallAgent: "IoT_InstallAgent",
    /**
     * IP Filter Configuration should have rules defined for allowed traffic and should deny all other traffic by default.
     */
    IoT_IPFilter_DenyAll: "IoT_IPFilter_DenyAll",
    /**
     * An Allow IP Filter rules source IP range is too large. Overly permissive rules might expose your IoT hub to malicious intenders.
     */
    IoT_IPFilter_PermissiveRule: "IoT_IPFilter_PermissiveRule",
    /**
     * A listening endpoint was found on the device.
     */
    IoT_OpenPorts: "IoT_OpenPorts",
    /**
     * An Allowed firewall policy was found (INPUT/OUTPUT). The policy should Deny all traffic by default and define rules to allow necessary communication to/from the device.
     */
    IoT_PermissiveFirewallPolicy: "IoT_PermissiveFirewallPolicy",
    /**
     * A rule in the firewall has been found that contains a permissive pattern for a wide range of IP addresses or Ports.
     */
    IoT_PermissiveInputFirewallRules: "IoT_PermissiveInputFirewallRules",
    /**
     * A rule in the firewall has been found that contains a permissive pattern for a wide range of IP addresses or Ports.
     */
    IoT_PermissiveOutputFirewallRules: "IoT_PermissiveOutputFirewallRules",
    /**
     * Edge module is configured to run in privileged mode, with extensive Linux capabilities or with host-level network access (send/receive data to host machine).
     */
    IoT_PrivilegedDockerOptions: "IoT_PrivilegedDockerOptions",
    /**
     * Same authentication credentials to the IoT Hub used by multiple devices. This could indicate an illegitimate device impersonating a legitimate device. It also exposes the risk of device impersonation by an attacker.
     */
    IoT_SharedCredentials: "IoT_SharedCredentials",
    /**
     * Insecure TLS configurations detected. Immediate upgrade recommended.
     */
    IoT_VulnerableTLSCipherSuite: "IoT_VulnerableTLSCipherSuite",
};
exports.Roles = {
    /**
     * If enabled, send notification on new alerts to the account admins
     */
    AccountAdmin: "AccountAdmin",
    /**
     * If enabled, send notification on new alerts to the service admins
     */
    ServiceAdmin: "ServiceAdmin",
    /**
     * If enabled, send notification on new alerts to the subscription owners
     */
    Owner: "Owner",
    /**
     * If enabled, send notification on new alerts to the subscription contributors
     */
    Contributor: "Contributor",
};
exports.RuleState = {
    Enabled: "Enabled",
    Disabled: "Disabled",
    Expired: "Expired",
};
exports.SecuritySolutionStatus = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.Severity = {
    Low: "Low",
    Medium: "Medium",
    High: "High",
};
exports.SeverityEnum = {
    High: "High",
    Medium: "Medium",
    Low: "Low",
};
exports.Source = {
    /**
     * Resource is in Azure
     */
    Azure: "Azure",
    /**
     * Resource in an on premise machine connected to Azure cloud
     */
    OnPremise: "OnPremise",
    /**
     * SQL Resource in an on premise machine connected to Azure cloud
     */
    OnPremiseSql: "OnPremiseSql",
};
exports.StandardSupportedClouds = {
    AWS: "AWS",
    GCP: "GCP",
};
exports.State = {
    /**
     * Send notification on new alerts to the subscription's admins
     */
    On: "On",
    /**
     * Don't send notification on new alerts to the subscription's admins
     */
    Off: "Off",
};
exports.Status = {
    Revoked: "Revoked",
    Initiated: "Initiated",
};
exports.StatusReason = {
    Expired: "Expired",
    UserRequested: "UserRequested",
    NewerRequestInitiated: "NewerRequestInitiated",
};
exports.SupportedCloudEnum = {
    AWS: "AWS",
    GCP: "GCP",
};
exports.Threats = {
    AccountBreach: "accountBreach",
    DataExfiltration: "dataExfiltration",
    DataSpillage: "dataSpillage",
    MaliciousInsider: "maliciousInsider",
    ElevationOfPrivilege: "elevationOfPrivilege",
    ThreatResistance: "threatResistance",
    MissingCoverage: "missingCoverage",
    DenialOfService: "denialOfService",
};
exports.UnmaskedIpLoggingStatus = {
    /**
     * Unmasked IP logging is disabled
     */
    Disabled: "Disabled",
    /**
     * Unmasked IP logging is enabled
     */
    Enabled: "Enabled",
};
exports.UserImpact = {
    Low: "Low",
    Moderate: "Moderate",
    High: "High",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90eXBlcy9lbnVtcy9zZWN1cml0eS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsd0VBQXdFO0FBQ3hFLGlGQUFpRjs7O0FBRWpGLHNCQUFzQjtBQUN0Qix1REFBdUQ7QUFZbkQsNENBQWdCO0FBWHBCLHVEQUF1RDtBQVluRCw0Q0FBZ0I7QUFYcEIsdURBQXVEO0FBWW5ELDRDQUFnQjtBQVhwQix5Q0FBeUM7QUFZckMsOEJBQVM7QUFYYix5Q0FBeUM7QUFZckMsOEJBQVM7QUFYYix1REFBdUQ7QUFZbkQsNENBQWdCO0FBWHBCLHlDQUF5QztBQVlyQyw4QkFBUztBQVhiLHVEQUF1RDtBQVluRCw0Q0FBZ0I7QUFYcEIsdURBQXVEO0FBWW5ELDRDQUFnQjtBQVhwQix1REFBdUQ7QUFZbkQsNENBQWdCO0FBR1AsUUFBQSxVQUFVLEdBQUc7SUFDdEIsUUFBUSxFQUFFLFVBQVU7SUFDcEIsUUFBUSxFQUFFLFVBQVU7SUFDcEIsU0FBUyxFQUFFLFdBQVc7Q0FDaEIsQ0FBQztBQU9FLFFBQUEsMkJBQTJCLEdBQUc7SUFDdkMsTUFBTSxFQUFFLFFBQVE7SUFDaEIsU0FBUyxFQUFFLFdBQVc7Q0FDaEIsQ0FBQztBQU9FLFFBQUEsdUJBQXVCLEdBQUc7SUFDbkMsUUFBUSxFQUFFLFVBQVU7Q0FDZCxDQUFDO0FBT0UsUUFBQSxvQkFBb0IsR0FBRztJQUNoQzs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsU0FBUyxFQUFFLFdBQVc7SUFDdEI7O09BRUc7SUFDSCxhQUFhLEVBQUUsZUFBZTtDQUN4QixDQUFDO0FBT0UsUUFBQSxjQUFjLEdBQUc7SUFDMUI7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztJQUNsQjs7T0FFRztJQUNILFlBQVksRUFBRSxjQUFjO0lBQzVCOztPQUVHO0lBQ0gsZUFBZSxFQUFFLGlCQUFpQjtJQUNsQzs7T0FF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