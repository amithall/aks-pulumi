import * as v20151101preview from "./v20151101preview";
import * as v20200301preview from "./v20200301preview";
import * as v20200801 from "./v20200801";
import * as v20201001 from "./v20201001";
import * as v20210601 from "./v20210601";
import * as v20211201preview from "./v20211201preview";
export { v20151101preview, v20200301preview, v20200801, v20201001, v20210601, v20211201preview, };
export declare const BillingType: {
    readonly Cluster: "Cluster";
    readonly Workspaces: "Workspaces";
};
/**
 * The cluster's billing type.
 */
export declare type BillingType = (typeof BillingType)[keyof typeof BillingType];
export declare const ClusterSkuNameEnum: {
    readonly CapacityReservation: "CapacityReservation";
};
/**
 * The name of the SKU.
 */
export declare type ClusterSkuNameEnum = (typeof ClusterSkuNameEnum)[keyof typeof ClusterSkuNameEnum];
export declare const ColumnDataTypeHintEnum: {
    /**
     * A string that matches the pattern of a URI, for example, scheme://username:password@host:1234/this/is/a/path?k1=v1&k2=v2#fragment
     */
    readonly Uri: "uri";
    /**
     * A standard 128-bit GUID following the standard shape, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
     */
    readonly Guid: "guid";
    /**
     * An Azure Resource Model (ARM) path: /subscriptions/{...}/resourceGroups/{...}/providers/Microsoft.{...}/{...}/{...}/{...}...
     */
    readonly ArmPath: "armPath";
    /**
     * A standard V4/V6 ip address following the standard shape, x.x.x.x/y:y:y:y:y:y:y:y
     */
    readonly Ip: "ip";
};
/**
 * Column data type logical hint.
 */
export declare type ColumnDataTypeHintEnum = (typeof ColumnDataTypeHintEnum)[keyof typeof ColumnDataTypeHintEnum];
export declare const ColumnTypeEnum: {
    readonly String: "string";
    readonly Int: "int";
    readonly Long: "long";
    readonly Real: "real";
    readonly Boolean: "boolean";
    readonly DateTime: "dateTime";
    readonly Guid: "guid";
    readonly Dynamic: "dynamic";
};
/**
 * Column data type.
 */
export declare type ColumnTypeEnum = (typeof ColumnTypeEnum)[keyof typeof ColumnTypeEnum];
export declare const DataSourceKind: {
    readonly WindowsEvent: "WindowsEvent";
    readonly WindowsPerformanceCounter: "WindowsPerformanceCounter";
    readonly IISLogs: "IISLogs";
    readonly LinuxSyslog: "LinuxSyslog";
    readonly LinuxSyslogCollection: "LinuxSyslogCollection";
    readonly LinuxPerformanceObject: "LinuxPerformanceObject";
    readonly LinuxPerformanceCollection: "LinuxPerformanceCollection";
    readonly CustomLog: "CustomLog";
    readonly CustomLogCollection: "CustomLogCollection";
    readonly AzureAuditLog: "AzureAuditLog";
    readonly AzureActivityLog: "AzureActivityLog";
    readonly GenericDataSource: "GenericDataSource";
    readonly ChangeTrackingCustomPath: "ChangeTrackingCustomPath";
    readonly ChangeTrackingPath: "ChangeTrackingPath";
    readonly ChangeTrackingServices: "ChangeTrackingServices";
    readonly ChangeTrackingDataTypeConfiguration: "ChangeTrackingDataTypeConfiguration";
    readonly ChangeTrackingDefaultRegistry: "ChangeTrackingDefaultRegistry";
    readonly ChangeTrackingRegistry: "ChangeTrackingRegistry";
    readonly ChangeTrackingLinuxPath: "ChangeTrackingLinuxPath";
    readonly LinuxChangeTrackingPath: "LinuxChangeTrackingPath";
    readonly ChangeTrackingContentLocation: "ChangeTrackingContentLocation";
    readonly WindowsTelemetry: "WindowsTelemetry";
    readonly Office365: "Office365";
    readonly SecurityWindowsBaselineConfiguration: "SecurityWindowsBaselineConfiguration";
    readonly SecurityCenterSecurityWindowsBaselineConfiguration: "SecurityCenterSecurityWindowsBaselineConfiguration";
    readonly SecurityEventCollectionConfiguration: "SecurityEventCollectionConfiguration";
    readonly SecurityInsightsSecurityEventCollectionConfiguration: "SecurityInsightsSecurityEventCollectionConfiguration";
    readonly ImportComputerGroup: "ImportComputerGroup";
    readonly NetworkMonitoring: "NetworkMonitoring";
    readonly Itsm: "Itsm";
    readonly DnsAnalytics: "DnsAnalytics";
    readonly ApplicationInsights: "ApplicationInsights";
    readonly SqlDataClassification: "SqlDataClassification";
};
/**
 * The kind of the DataSource.
 */
export declare type DataSourceKind = (typeof DataSourceKind)[keyof typeof DataSourceKind];
export declare const IdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly None: "None";
};
/**
 * Type of managed service identity.
 */
export declare type IdentityType = (typeof IdentityType)[keyof typeof IdentityType];
export declare const LinkedServiceEntityStatus: {
    readonly Succeeded: "Succeeded";
    readonly Deleting: "Deleting";
    readonly ProvisioningAccount: "ProvisioningAccount";
    readonly Updating: "Updating";
};
/**
 * The provisioning state of the linked service.
 */
export declare type LinkedServiceEntityStatus = (typeof LinkedServiceEntityStatus)[keyof typeof LinkedServiceEntityStatus];
export declare const MachineGroupType: {
    readonly Unknown: "unknown";
    readonly Azure_cs: "azure-cs";
    readonly Azure_sf: "azure-sf";
    readonly Azure_vmss: "azure-vmss";
    readonly User_static: "user-static";
};
/**
 * Type of the machine group
 */
export declare type MachineGroupType = (typeof MachineGroupType)[keyof typeof MachineGroupType];
export declare const PublicNetworkAccessType: {
    /**
     * Enables connectivity to Log Analytics through public DNS.
     */
    readonly Enabled: "Enabled";
    /**
     * Disables public connectivity to Log Analytics through public DNS.
     */
    readonly Disabled: "Disabled";
};
/**
 * The network access type for accessing Log Analytics query.
 */
export declare type PublicNetworkAccessType = (typeof PublicNetworkAccessType)[keyof typeof PublicNetworkAccessType];
export declare const TablePlanEnum: {
    /**
     * Logs  that are adjusted to support high volume low value verbose logs.
     */
    readonly Basic: "Basic";
    /**
     * Logs  that allow monitoring and analytics.
     */
    readonly Analytics: "Analytics";
};
/**
 * Instruct the system how to handle and charge the logs ingested to this table.
 */
export declare type TablePlanEnum = (typeof TablePlanEnum)[keyof typeof TablePlanEnum];
export declare const WorkspaceEntityStatus: {
    readonly Creating: "Creating";
    readonly Succeeded: "Succeeded";
    readonly Failed: "Failed";
    readonly Canceled: "Canceled";
    readonly Deleting: "Deleting";
    readonly ProvisioningAccount: "ProvisioningAccount";
    readonly Updating: "Updating";
};
/**
 * The provisioning state of the workspace.
 */
export declare type WorkspaceEntityStatus = (typeof WorkspaceEntityStatus)[keyof typeof WorkspaceEntityStatus];
export declare const WorkspaceSkuNameEnum: {
    readonly Free: "Free";
    readonly Standard: "Standard";
    readonly Premium: "Premium";
    readonly PerNode: "PerNode";
    readonly PerGB2018: "PerGB2018";
    readonly Standalone: "Standalone";
    readonly CapacityReservation: "CapacityReservation";
    readonly LACluster: "LACluster";
};
/**
 * The name of the SKU.
 */
export declare type WorkspaceSkuNameEnum = (typeof WorkspaceSkuNameEnum)[keyof typeof WorkspaceSkuNameEnum];
