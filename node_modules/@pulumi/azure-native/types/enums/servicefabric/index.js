"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServicePlacementPolicyType = exports.ServiceLoadMetricWeight = exports.ServiceKind = exports.ServiceCorrelationScheme = exports.RollingUpgradeMode = exports.Protocol = exports.ProbeProtocol = exports.PartitionScheme = exports.MoveCost = exports.ManagedIdentityType = exports.ArmUpgradeFailureAction = exports.ArmServicePackageActivationMode = exports.v20220201preview = exports.v20220101 = exports.v20211101preview = exports.v20210901privatepreview = exports.v20210701preview = exports.v20210601 = exports.v20210501 = exports.v20210101preview = exports.v20201201preview = exports.v20200301 = exports.v20200101preview = exports.v20191101preview = exports.v20190601preview = exports.v20190301preview = exports.v20190301 = exports.v20170701preview = void 0;
// Export sub-modules:
const v20170701preview = require("./v20170701preview");
exports.v20170701preview = v20170701preview;
const v20190301 = require("./v20190301");
exports.v20190301 = v20190301;
const v20190301preview = require("./v20190301preview");
exports.v20190301preview = v20190301preview;
const v20190601preview = require("./v20190601preview");
exports.v20190601preview = v20190601preview;
const v20191101preview = require("./v20191101preview");
exports.v20191101preview = v20191101preview;
const v20200101preview = require("./v20200101preview");
exports.v20200101preview = v20200101preview;
const v20200301 = require("./v20200301");
exports.v20200301 = v20200301;
const v20201201preview = require("./v20201201preview");
exports.v20201201preview = v20201201preview;
const v20210101preview = require("./v20210101preview");
exports.v20210101preview = v20210101preview;
const v20210501 = require("./v20210501");
exports.v20210501 = v20210501;
const v20210601 = require("./v20210601");
exports.v20210601 = v20210601;
const v20210701preview = require("./v20210701preview");
exports.v20210701preview = v20210701preview;
const v20210901privatepreview = require("./v20210901privatepreview");
exports.v20210901privatepreview = v20210901privatepreview;
const v20211101preview = require("./v20211101preview");
exports.v20211101preview = v20211101preview;
const v20220101 = require("./v20220101");
exports.v20220101 = v20220101;
const v20220201preview = require("./v20220201preview");
exports.v20220201preview = v20220201preview;
exports.ArmServicePackageActivationMode = {
    /**
     * Indicates the application package activation mode will use shared process.
     */
    SharedProcess: "SharedProcess",
    /**
     * Indicates the application package activation mode will use exclusive process.
     */
    ExclusiveProcess: "ExclusiveProcess",
};
exports.ArmUpgradeFailureAction = {
    /**
     * Indicates that a rollback of the upgrade will be performed by Service Fabric if the upgrade fails.
     */
    Rollback: "Rollback",
    /**
     * Indicates that a manual repair will need to be performed by the administrator if the upgrade fails. Service Fabric will not proceed to the next upgrade domain automatically.
     */
    Manual: "Manual",
};
exports.ManagedIdentityType = {
    /**
     * Indicates that system assigned identity is associated with the resource.
     */
    SystemAssigned: "SystemAssigned",
    /**
     * Indicates that user assigned identity is associated with the resource.
     */
    UserAssigned: "UserAssigned",
    /**
     * Indicates that both system assigned and user assigned identity are associated with the resource.
     */
    SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned",
    /**
     * Indicates that no identity is associated with the resource.
     */
    None: "None",
};
exports.MoveCost = {
    /**
     * Zero move cost. This value is zero.
     */
    Zero: "Zero",
    /**
     * Specifies the move cost of the service as Low. The value is 1.
     */
    Low: "Low",
    /**
     * Specifies the move cost of the service as Medium. The value is 2.
     */
    Medium: "Medium",
    /**
     * Specifies the move cost of the service as High. The value is 3.
     */
    High: "High",
};
exports.PartitionScheme = {
    /**
     * Indicates the partition kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
     */
    Invalid: "Invalid",
    /**
     * Indicates that the partition is based on string names, and is a SingletonPartitionSchemeDescription object, The value is 1.
     */
    Singleton: "Singleton",
    /**
     * Indicates that the partition is based on Int64 key ranges, and is a UniformInt64RangePartitionSchemeDescription object. The value is 2.
     */
    UniformInt64Range: "UniformInt64Range",
    /**
     * Indicates that the partition is based on string names, and is a NamedPartitionSchemeDescription object. The value is 3
     */
    Named: "Named",
};
exports.ProbeProtocol = {
    Tcp: "tcp",
    Http: "http",
    Https: "https",
};
exports.Protocol = {
    Tcp: "tcp",
    Udp: "udp",
};
exports.RollingUpgradeMode = {
    /**
     * Indicates the upgrade mode is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
     */
    Invalid: "Invalid",
    /**
     * The upgrade will proceed automatically without performing any health monitoring. The value is 1
     */
    UnmonitoredAuto: "UnmonitoredAuto",
    /**
     * The upgrade will stop after completing each upgrade domain, giving the opportunity to manually monitor health before proceeding. The value is 2
     */
    UnmonitoredManual: "UnmonitoredManual",
    /**
     * The upgrade will stop after completing each upgrade domain and automatically monitor health before proceeding. The value is 3
     */
    Monitored: "Monitored",
};
exports.ServiceCorrelationScheme = {
    /**
     * An invalid correlation scheme. Cannot be used. The value is zero.
     */
    Invalid: "Invalid",
    /**
     * Indicates that this service has an affinity relationship with another service. Provided for backwards compatibility, consider preferring the Aligned or NonAlignedAffinity options. The value is 1.
     */
    Affinity: "Affinity",
    /**
     * Aligned affinity ensures that the primaries of the partitions of the affinitized services are collocated on the same nodes. This is the default and is the same as selecting the Affinity scheme. The value is 2.
     */
    AlignedAffinity: "AlignedAffinity",
    /**
     * Non-Aligned affinity guarantees that all replicas of each service will be placed on the same nodes. Unlike Aligned Affinity, this does not guarantee that replicas of particular role will be collocated. The value is 3.
     */
    NonAlignedAffinity: "NonAlignedAffinity",
};
exports.ServiceKind = {
    /**
     * Indicates the service kind is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
     */
    Invalid: "Invalid",
    /**
     * Does not use Service Fabric to make its state highly available or reliable. The value is 1.
     */
    Stateless: "Stateless",
    /**
     * Uses Service Fabric to make its state or part of its state highly available and reliable. The value is 2.
     */
    Stateful: "Stateful",
};
exports.ServiceLoadMetricWeight = {
    /**
     * Disables resource balancing for this metric. This value is zero.
     */
    Zero: "Zero",
    /**
     * Specifies the metric weight of the service load as Low. The value is 1.
     */
    Low: "Low",
    /**
     * Specifies the metric weight of the service load as Medium. The value is 2.
     */
    Medium: "Medium",
    /**
     * Specifies the metric weight of the service load as High. The value is 3.
     */
    High: "High",
};
exports.ServicePlacementPolicyType = {
    /**
     * Indicates the type of the placement policy is invalid. All Service Fabric enumerations have the invalid type. The value is zero.
     */
    Invalid: "Invalid",
    /**
     * Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementInvalidDomainPolicyDescription, which indicates that a particular fault or upgrade domain cannot be used for placement of this service. The value is 1.
     */
    InvalidDomain: "InvalidDomain",
    /**
     * Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription indicating that the replicas of the service must be placed in a specific domain. The value is 2.
     */
    RequiredDomain: "RequiredDomain",
    /**
     * Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementPreferPrimaryDomainPolicyDescription, which indicates that if possible the Primary replica for the partitions of the service should be located in a particular domain as an optimization. The value is 3.
     */
    PreferredPrimaryDomain: "PreferredPrimaryDomain",
    /**
     * Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription, indicating that the system will disallow placement of any two replicas from the same partition in the same domain at any time. The value is 4.
     */
    RequiredDomainDistribution: "RequiredDomainDistribution",
    /**
     * Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementNonPartiallyPlaceServicePolicyDescription, which indicates that if possible all replicas of a particular partition of the service should be placed atomically. The value is 5.
     */
    NonPartiallyPlaceService: "NonPartiallyPlaceService",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90eXBlcy9lbnVtcy9zZXJ2aWNlZmFicmljL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSx3RUFBd0U7QUFDeEUsaUZBQWlGOzs7QUFFakYsc0JBQXNCO0FBQ3RCLHVEQUF1RDtBQWtCbkQsNENBQWdCO0FBakJwQix5Q0FBeUM7QUFrQnJDLDhCQUFTO0FBakJiLHVEQUF1RDtBQWtCbkQsNENBQWdCO0FBakJwQix1REFBdUQ7QUFrQm5ELDRDQUFnQjtBQWpCcEIsdURBQXVEO0FBa0JuRCw0Q0FBZ0I7QUFqQnBCLHVEQUF1RDtBQWtCbkQsNENBQWdCO0FBakJwQix5Q0FBeUM7QUFrQnJDLDhCQUFTO0FBakJiLHVEQUF1RDtBQWtCbkQsNENBQWdCO0FBakJwQix1REFBdUQ7QUFrQm5ELDRDQUFnQjtBQWpCcEIseUNBQXlDO0FBa0JyQyw4QkFBUztBQWpCYix5Q0FBeUM7QUFrQnJDLDhCQUFTO0FBakJiLHVEQUF1RDtBQWtCbkQsNENBQWdCO0FBakJwQixxRUFBcUU7QUFrQmpFLDBEQUF1QjtBQWpCM0IsdURBQXVEO0FBa0JuRCw0Q0FBZ0I7QUFqQnBCLHlDQUF5QztBQWtCckMsOEJBQVM7QUFqQmIsdURBQXVEO0FBa0JuRCw0Q0FBZ0I7QUFHUCxRQUFBLCtCQUErQixHQUFHO0lBQzNDOztPQUVHO0lBQ0gsYUFBYSxFQUFFLGVBQWU7SUFDOUI7O09BRUc7SUFDSCxnQkFBZ0IsRUFBRSxrQkFBa0I7Q0FDOUIsQ0FBQztBQU9FLFFBQUEsdUJBQXVCLEdBQUc7SUFDbkM7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtJQUNwQjs7T0FFRztJQUNILE1BQU0sRUFBRSxRQUFRO0NBQ1YsQ0FBQztBQU9FLFFBQUEsbUJBQW1CLEdBQUc7SUFDL0I7O09BRUc7SUFDSCxjQUFjLEVBQUUsZ0JBQWdCO0lBQ2hDOztPQUVHO0lBQ0gsWUFBWSxFQUFFLGNBQWM7SUFDNUI7O09BRUc7SUFDSCwyQkFBMkIsRUFBRSw4QkFBOEI7SUFDM0Q7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtDQUNOLENBQUM7QUFPRSxRQUFBLFFBQVEsR0FBRztJQUNwQjs7T0FFRztJQUNILElBQUksRUFBRSxNQUFNO0lBQ1o7O09BRUc7SUFDSCxHQUFHLEVBQUUsS0FBSztJQUNWOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtDQUNOLENBQUM7QUFPRSxRQUFBLGVBQWUsR0FBRztJQUMzQjs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsU0FBUyxFQUFFLFdBQVc7SUFDdEI7O09BRUc7SUFDSCxpQkFBaUIsRUFBRSxtQkFBbUI7SUFDdEM7O09BRUc7SUFDSCxLQUFLLEVBQUUsT0FBTztDQUNSLENBQUM7QUFPRSxRQUFBLGFBQWEsR0FBRztJQUN6QixHQUFHLEVBQUUsS0FBSztJQUNWLElBQUksRUFBRSxNQUFNO0lBQ1osS0FBSyxFQUFFLE9BQU87Q0FDUixDQUFDO0FBT0UsUUFBQSxRQUFRLEdBQUc7SUFDcEIsR0FBRyxFQUFFLEtBQUs7SUFDVixHQUFHLEVBQUUsS0FBSztDQUNKLENBQUM7QUFPRSxRQUFBLGtCQUFrQixHQUFHO0lBQzlCOztPQUVHO0lBQ0gsT0FBTyxFQUFFLFNBQVM7SUFDbEI7O09BRUc7SUFDSCxlQUFlLEVBQUUsaUJBQWlCO0lBQ2xDOztPQUVHO0lBQ0gsaUJBQWlCLEVBQUUsbUJBQW1CO0lBQ3RDOztPQUVHO0lBQ0gsU0FBUyxFQUFFLFdBQVc7Q0FDaEIsQ0FBQztBQU9FLFFBQUEsd0JBQXdCLEdBQUc7SUFDcEM7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztJQUNsQjs7T0FFRztJQUNILFFBQVEsRUFBRSxVQUFVO0lBQ3BCOztPQUVHO0lBQ0gsZUFBZSxFQUFFLGlCQUFpQjtJQUNsQzs7T0FFRztJQUNILGtCQUFrQixFQUFFLG9CQUFvQjtDQUNsQyxDQUFDO0FBT0UsUUFBQSxXQUFXLEdBQUc7SUFDdkI7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztJQUNsQjs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0lBQ3RCOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFVBQVU7Q0FDZCxDQUFDO0FBT0UsUUFBQSx1QkFBdUIsR0FBRztJQUNuQzs7T0FFRztJQUNILElBQUksRUFBRSxNQUFNO0lBQ1o7O09BRUc7SUFDSCxHQUFHLEVBQUUsS0FBSztJQUNWOztPQUVHO0lBQ0gsTUFBTSxFQUFFLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtDQUNOLENBQUM7QUFPRSxRQUFBLDBCQUEwQixHQUFHO0lBQ3RDOztPQUVHO0lBQ0gsT0FBTyxFQUFFLFNBQVM7SUFDbEI7O09BRUc7SUFDSCxhQUFhLEVBQUUsZUFBZTtJQUM5Qjs7T0FFRztJQUNILGNBQWMsRUFBRSxnQkFBZ0I7SUFDaEM7O09BRUc7SUFDSCxzQkFBc0IsRUFBRSx3QkFBd0I7SUFDaEQ7O09BRUc7SUFDSCwwQkFBMEIsRUFBRSw0QkFBNEI7SUFDeEQ7O09BRUc7SUFDSCx3QkFBd0IsRUFBRSwwQkFBMEI7Q0FDOUMsQ0FBQyJ9