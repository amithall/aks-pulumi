"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpnType = exports.VirtualNetworkPeeringState = exports.VirtualNetworkGatewayType = exports.VirtualNetworkGatewaySkuTier = exports.VirtualNetworkGatewaySkuName = exports.VirtualNetworkGatewayConnectionType = exports.TransportProtocol = exports.ServiceProviderProvisioningState = exports.SecurityRuleProtocol = exports.SecurityRuleDirection = exports.SecurityRuleAccess = exports.RouteNextHopType = exports.RouteFilterRuleType = exports.ProbeProtocol = exports.PcProtocol = exports.LoadDistribution = exports.IPVersion = exports.IPAllocationMethod = exports.ExpressRouteCircuitSkuTier = exports.ExpressRouteCircuitSkuFamily = exports.ExpressRouteCircuitPeeringType = exports.ExpressRouteCircuitPeeringState = exports.ExpressRouteCircuitPeeringAdvertisedPublicPrefixState = exports.AuthorizationUseStatus = exports.ApplicationGatewayTier = exports.ApplicationGatewaySslProtocol = exports.ApplicationGatewaySkuName = exports.ApplicationGatewayRequestRoutingRuleType = exports.ApplicationGatewayProtocol = exports.ApplicationGatewayFirewallMode = exports.ApplicationGatewayCookieBasedAffinity = exports.Access = void 0;
exports.Access = {
    Allow: "Allow",
    Deny: "Deny",
};
exports.ApplicationGatewayCookieBasedAffinity = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.ApplicationGatewayFirewallMode = {
    Detection: "Detection",
    Prevention: "Prevention",
};
exports.ApplicationGatewayProtocol = {
    Http: "Http",
    Https: "Https",
};
exports.ApplicationGatewayRequestRoutingRuleType = {
    Basic: "Basic",
    PathBasedRouting: "PathBasedRouting",
};
exports.ApplicationGatewaySkuName = {
    Standard_Small: "Standard_Small",
    Standard_Medium: "Standard_Medium",
    Standard_Large: "Standard_Large",
    WAF_Medium: "WAF_Medium",
    WAF_Large: "WAF_Large",
};
exports.ApplicationGatewaySslProtocol = {
    TLSv1_0: "TLSv1_0",
    TLSv1_1: "TLSv1_1",
    TLSv1_2: "TLSv1_2",
};
exports.ApplicationGatewayTier = {
    Standard: "Standard",
    WAF: "WAF",
};
exports.AuthorizationUseStatus = {
    Available: "Available",
    InUse: "InUse",
};
exports.ExpressRouteCircuitPeeringAdvertisedPublicPrefixState = {
    NotConfigured: "NotConfigured",
    Configuring: "Configuring",
    Configured: "Configured",
    ValidationNeeded: "ValidationNeeded",
};
exports.ExpressRouteCircuitPeeringState = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.ExpressRouteCircuitPeeringType = {
    AzurePublicPeering: "AzurePublicPeering",
    AzurePrivatePeering: "AzurePrivatePeering",
    MicrosoftPeering: "MicrosoftPeering",
};
exports.ExpressRouteCircuitSkuFamily = {
    UnlimitedData: "UnlimitedData",
    MeteredData: "MeteredData",
};
exports.ExpressRouteCircuitSkuTier = {
    Standard: "Standard",
    Premium: "Premium",
};
exports.IPAllocationMethod = {
    Static: "Static",
    Dynamic: "Dynamic",
};
exports.IPVersion = {
    IPv4: "IPv4",
    IPv6: "IPv6",
};
exports.LoadDistribution = {
    Default: "Default",
    SourceIP: "SourceIP",
    SourceIPProtocol: "SourceIPProtocol",
};
exports.PcProtocol = {
    TCP: "TCP",
    UDP: "UDP",
    Any: "Any",
};
exports.ProbeProtocol = {
    Http: "Http",
    Tcp: "Tcp",
};
exports.RouteFilterRuleType = {
    Community: "Community",
};
exports.RouteNextHopType = {
    VirtualNetworkGateway: "VirtualNetworkGateway",
    VnetLocal: "VnetLocal",
    Internet: "Internet",
    VirtualAppliance: "VirtualAppliance",
    None: "None",
};
exports.SecurityRuleAccess = {
    Allow: "Allow",
    Deny: "Deny",
};
exports.SecurityRuleDirection = {
    Inbound: "Inbound",
    Outbound: "Outbound",
};
exports.SecurityRuleProtocol = {
    Tcp: "Tcp",
    Udp: "Udp",
    Asterisk: "*",
};
exports.ServiceProviderProvisioningState = {
    NotProvisioned: "NotProvisioned",
    Provisioning: "Provisioning",
    Provisioned: "Provisioned",
    Deprovisioning: "Deprovisioning",
};
exports.TransportProtocol = {
    Udp: "Udp",
    Tcp: "Tcp",
};
exports.VirtualNetworkGatewayConnectionType = {
    IPsec: "IPsec",
    Vnet2Vnet: "Vnet2Vnet",
    ExpressRoute: "ExpressRoute",
    VPNClient: "VPNClient",
};
exports.VirtualNetworkGatewaySkuName = {
    Basic: "Basic",
    HighPerformance: "HighPerformance",
    Standard: "Standard",
    UltraPerformance: "UltraPerformance",
};
exports.VirtualNetworkGatewaySkuTier = {
    Basic: "Basic",
    HighPerformance: "HighPerformance",
    Standard: "Standard",
    UltraPerformance: "UltraPerformance",
};
exports.VirtualNetworkGatewayType = {
    Vpn: "Vpn",
    ExpressRoute: "ExpressRoute",
};
exports.VirtualNetworkPeeringState = {
    Initiated: "Initiated",
    Connected: "Connected",
    Disconnected: "Disconnected",
};
exports.VpnType = {
    PolicyBased: "PolicyBased",
    RouteBased: "RouteBased",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90eXBlcy9lbnVtcy9uZXR3b3JrL3YyMDE2MTIwMS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsd0VBQXdFO0FBQ3hFLGlGQUFpRjs7O0FBR3BFLFFBQUEsTUFBTSxHQUFHO0lBQ2xCLEtBQUssRUFBRSxPQUFPO0lBQ2QsSUFBSSxFQUFFLE1BQU07Q0FDTixDQUFDO0FBT0UsUUFBQSxxQ0FBcUMsR0FBRztJQUNqRCxPQUFPLEVBQUUsU0FBUztJQUNsQixRQUFRLEVBQUUsVUFBVTtDQUNkLENBQUM7QUFPRSxRQUFBLDhCQUE4QixHQUFHO0lBQzFDLFNBQVMsRUFBRSxXQUFXO0lBQ3RCLFVBQVUsRUFBRSxZQUFZO0NBQ2xCLENBQUM7QUFPRSxRQUFBLDBCQUEwQixHQUFHO0lBQ3RDLElBQUksRUFBRSxNQUFNO0lBQ1osS0FBSyxFQUFFLE9BQU87Q0FDUixDQUFDO0FBT0UsUUFBQSx3Q0FBd0MsR0FBRztJQUNwRCxLQUFLLEVBQUUsT0FBTztJQUNkLGdCQUFnQixFQUFFLGtCQUFrQjtDQUM5QixDQUFDO0FBT0UsUUFBQSx5QkFBeUIsR0FBRztJQUNyQyxjQUFjLEVBQUUsZ0JBQWdCO0lBQ2hDLGVBQWUsRUFBRSxpQkFBaUI7SUFDbEMsY0FBYyxFQUFFLGdCQUFnQjtJQUNoQyxVQUFVLEVBQUUsWUFBWTtJQUN4QixTQUFTLEVBQUUsV0FBVztDQUNoQixDQUFDO0FBT0UsUUFBQSw2QkFBNkIsR0FBRztJQUN6QyxPQUFPLEVBQUUsU0FBUztJQUNsQixPQUFPLEVBQUUsU0FBUztJQUNsQixPQUFPLEVBQUUsU0FBUztDQUNaLENBQUM7QUFJRSxRQUFBLHNCQUFzQixHQUFHO0lBQ2xDLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLEdBQUcsRUFBRSxLQUFLO0NBQ0osQ0FBQztBQU9FLFFBQUEsc0JBQXNCLEdBQUc7SUFDbEMsU0FBUyxFQUFFLFdBQVc7SUFDdEIs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