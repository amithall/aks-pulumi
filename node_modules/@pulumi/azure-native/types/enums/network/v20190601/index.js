"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProbeProtocol = exports.PfsGroup = exports.PcProtocol = exports.NatGatewaySkuName = exports.LoadDistribution = exports.LoadBalancerSkuName = exports.LoadBalancerOutboundRuleProtocol = exports.IpsecIntegrity = exports.IpsecEncryption = exports.IkeIntegrity = exports.IkeEncryption = exports.IPVersion = exports.IPAllocationMethod = exports.FirewallPolicyRuleType = exports.FirewallPolicyRuleConditionType = exports.FirewallPolicyRuleConditionNetworkProtocol = exports.FirewallPolicyRuleConditionApplicationProtocolType = exports.FirewallPolicyNatRuleActionType = exports.FirewallPolicyFilterRuleActionType = exports.ExpressRoutePortsEncapsulation = exports.ExpressRoutePeeringType = exports.ExpressRoutePeeringState = exports.ExpressRouteLinkAdminState = exports.ExpressRouteCircuitSkuTier = exports.ExpressRouteCircuitSkuFamily = exports.ExpressRouteCircuitPeeringState = exports.ExpressRouteCircuitPeeringAdvertisedPublicPrefixState = exports.DhGroup = exports.DdosSettingsProtectionCoverage = exports.DdosCustomPolicyTriggerSensitivityOverride = exports.DdosCustomPolicyProtocol = exports.AzureFirewallThreatIntelMode = exports.AzureFirewallRCActionType = exports.AzureFirewallNetworkRuleProtocol = exports.AzureFirewallNatRCActionType = exports.AzureFirewallApplicationRuleProtocolType = exports.AuthorizationUseStatus = exports.ApplicationGatewayTier = exports.ApplicationGatewaySslProtocol = exports.ApplicationGatewaySslPolicyType = exports.ApplicationGatewaySslPolicyName = exports.ApplicationGatewaySslCipherSuite = exports.ApplicationGatewaySkuName = exports.ApplicationGatewayRequestRoutingRuleType = exports.ApplicationGatewayRedirectType = exports.ApplicationGatewayProtocol = exports.ApplicationGatewayFirewallMode = exports.ApplicationGatewayCustomErrorStatusCode = exports.ApplicationGatewayCookieBasedAffinity = exports.Access = void 0;
exports.WebApplicationFirewallTransform = exports.WebApplicationFirewallRuleType = exports.WebApplicationFirewallOperator = exports.WebApplicationFirewallMode = exports.WebApplicationFirewallMatchVariable = exports.WebApplicationFirewallEnabledState = exports.WebApplicationFirewallAction = exports.VpnType = exports.VpnGatewayTunnelingProtocol = exports.VpnClientProtocol = exports.VirtualNetworkPeeringState = exports.VirtualNetworkGatewayType = exports.VirtualNetworkGatewaySkuTier = exports.VirtualNetworkGatewaySkuName = exports.VirtualNetworkGatewayConnectionType = exports.VirtualNetworkGatewayConnectionProtocol = exports.TransportProtocol = exports.ServiceProviderProvisioningState = exports.SecurityRuleProtocol = exports.SecurityRuleDirection = exports.SecurityRuleAccess = exports.RouteNextHopType = exports.RouteFilterRuleType = exports.ResourceIdentityType = exports.PublicIPPrefixSkuName = exports.PublicIPAddressSkuName = void 0;
exports.Access = {
    Allow: "Allow",
    Deny: "Deny",
};
exports.ApplicationGatewayCookieBasedAffinity = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.ApplicationGatewayCustomErrorStatusCode = {
    HttpStatus403: "HttpStatus403",
    HttpStatus502: "HttpStatus502",
};
exports.ApplicationGatewayFirewallMode = {
    Detection: "Detection",
    Prevention: "Prevention",
};
exports.ApplicationGatewayProtocol = {
    Http: "Http",
    Https: "Https",
};
exports.ApplicationGatewayRedirectType = {
    Permanent: "Permanent",
    Found: "Found",
    SeeOther: "SeeOther",
    Temporary: "Temporary",
};
exports.ApplicationGatewayRequestRoutingRuleType = {
    Basic: "Basic",
    PathBasedRouting: "PathBasedRouting",
};
exports.ApplicationGatewaySkuName = {
    Standard_Small: "Standard_Small",
    Standard_Medium: "Standard_Medium",
    Standard_Large: "Standard_Large",
    WAF_Medium: "WAF_Medium",
    WAF_Large: "WAF_Large",
    Standard_v2: "Standard_v2",
    WAF_v2: "WAF_v2",
};
exports.ApplicationGatewaySslCipherSuite = {
    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384: "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256: "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA: "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA: "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
    TLS_DHE_RSA_WITH_AES_256_GCM_SHA384: "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384",
    TLS_DHE_RSA_WITH_AES_128_GCM_SHA256: "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",
    TLS_DHE_RSA_WITH_AES_256_CBC_SHA: "TLS_DHE_RSA_WITH_AES_256_CBC_SHA",
    TLS_DHE_RSA_WITH_AES_128_CBC_SHA: "TLS_DHE_RSA_WITH_AES_128_CBC_SHA",
    TLS_RSA_WITH_AES_256_GCM_SHA384: "TLS_RSA_WITH_AES_256_GCM_SHA384",
    TLS_RSA_WITH_AES_128_GCM_SHA256: "TLS_RSA_WITH_AES_128_GCM_SHA256",
    TLS_RSA_WITH_AES_256_CBC_SHA256: "TLS_RSA_WITH_AES_256_CBC_SHA256",
    TLS_RSA_WITH_AES_128_CBC_SHA256: "TLS_RSA_WITH_AES_128_CBC_SHA256",
    TLS_RSA_WITH_AES_256_CBC_SHA: "TLS_RSA_WITH_AES_256_CBC_SHA",
    TLS_RSA_WITH_AES_128_CBC_SHA: "TLS_RSA_WITH_AES_128_CBC_SHA",
    TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
    TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
    TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384: "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
    TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256: "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
    TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",
    TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
    TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256",
    TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256",
    TLS_DHE_DSS_WITH_AES_256_CBC_SHA: "TLS_DHE_DSS_WITH_AES_256_CBC_SHA",
    TLS_DHE_DSS_WITH_AES_128_CBC_SHA: "TLS_DHE_DSS_WITH_AES_128_CBC_SHA",
    TLS_RSA_WITH_3DES_EDE_CBC_SHA: "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
    TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA",
    TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256: "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
    TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384: "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
};
exports.ApplicationGatewaySslPolicyName = {
    AppGwSslPolicy20150501: "AppGwSslPolicy20150501",
    AppGwSslPolicy20170401: "AppGwSslPolicy20170401",
    AppGwSslPolicy20170401S: "AppGwSslPolicy20170401S",
};
exports.ApplicationGatewaySslPolicyType = {
    Predefined: "Predefined",
    Custom: "Custom",
};
exports.ApplicationGatewaySslProtocol = {
    TLSv1_0: "TLSv1_0",
    TLSv1_1: "TLSv1_1",
    TLSv1_2: "TLSv1_2",
};
exports.ApplicationGatewayTier = {
    Standard: "Standard",
    WAF: "WAF",
    Standard_v2: "Standard_v2",
    WAF_v2: "WAF_v2",
};
exports.AuthorizationUseStatus = {
    Available: "Available",
    InUse: "InUse",
};
exports.AzureFirewallApplicationRuleProtocolType = {
    Http: "Http",
    Https: "Https",
};
exports.AzureFirewallNatRCActionType = {
    Snat: "Snat",
    Dnat: "Dnat",
};
exports.AzureFirewallNetworkRuleProtocol = {
    TCP: "TCP",
    UDP: "UDP",
    Any: "Any",
    ICMP: "ICMP",
};
exports.AzureFirewallRCActionType = {
    Allow: "Allow",
    Deny: "Deny",
};
exports.AzureFirewallThreatIntelMode = {
    Alert: "Alert",
    Deny: "Deny",
    Off: "Off",
};
exports.DdosCustomPolicyProtocol = {
    Tcp: "Tcp",
    Udp: "Udp",
    Syn: "Syn",
};
exports.DdosCustomPolicyTriggerSensitivityOverride = {
    Relaxed: "Relaxed",
    Low: "Low",
    Default: "Default",
    High: "High",
};
exports.DdosSettingsProtectionCoverage = {
    Basic: "Basic",
    Standard: "Standard",
};
exports.DhGroup = {
    None: "None",
    DHGroup1: "DHGroup1",
    DHGroup2: "DHGroup2",
    DHGroup14: "DHGroup14",
    DHGroup2048: "DHGroup2048",
    ECP256: "ECP256",
    ECP384: "ECP384",
    DHGroup24: "DHGroup24",
};
exports.ExpressRouteCircuitPeeringAdvertisedPublicPrefixState = {
    NotConfigured: "NotConfigured",
    Configuring: "Configuring",
    Configured: "Configured",
    ValidationNeeded: "ValidationNeeded",
};
exports.ExpressRouteCircuitPeeringState = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.ExpressRouteCircuitSkuFamily = {
    UnlimitedData: "UnlimitedData",
    MeteredData: "MeteredData",
};
exports.ExpressRouteCircuitSkuTier = {
    Standard: "Standard",
    Premium: "Premium",
    Basic: "Basic",
    Local: "Local",
};
exports.ExpressRouteLinkAdminState = {
    Enabled: "Enabled",
    Disabled: "Disabled",
};
exports.ExpressRoutePeeringState = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.ExpressRoutePeeringType = {
    AzurePublicPeering: "AzurePublicPeering",
    AzurePrivatePeering: "AzurePrivatePeering",
    MicrosoftPeering: "MicrosoftPeering",
};
exports.ExpressRoutePortsEncapsulation = {
    Dot1Q: "Dot1Q",
    QinQ: "QinQ",
};
exports.FirewallPolicyFilterRuleActionType = {
    Allow: "Allow",
    Deny: "Deny",
    Alert_: "Alert ",
};
exports.FirewallPolicyNatRuleActionType = {
    DNAT: "DNAT",
    SNAT: "SNAT",
};
exports.FirewallPolicyRuleConditionApplicationProtocolType = {
    Http: "Http",
    Https: "Https",
};
exports.FirewallPolicyRuleConditionNetworkProtocol = {
    TCP: "TCP",
    UDP: "UDP",
    Any: "Any",
    ICMP: "ICMP",
};
exports.FirewallPolicyRuleConditionType = {
    ApplicationRuleCondition: "ApplicationRuleCondition",
    NetworkRuleCondition: "NetworkRuleCondition",
};
exports.FirewallPolicyRuleType = {
    FirewallPolicyNatRule: "FirewallPolicyNatRule",
    FirewallPolicyFilterRule: "FirewallPolicyFilterRule",
};
exports.IPAllocationMethod = {
    Static: "Static",
    Dynamic: "Dynamic",
};
exports.IPVersion = {
    IPv4: "IPv4",
    IPv6: "IPv6",
};
exports.IkeEncryption = {
    DES: "DES",
    DES3: "DES3",
    AES128: "AES128",
    AES192: "AES192",
    AES256: "AES256",
    GCMAES256: "GCMAES256",
    GCMAES128: "GCMAES128",
};
exports.IkeIntegrity = {
    MD5: "MD5",
    SHA1: "SHA1",
    SHA256: "SHA256",
    SHA384: "SHA384",
    GCMAES256: "GCMAES256",
    GCMAES128: "GCMAES128",
};
exports.IpsecEncryption = {
    None: "None",
    DES: "DES",
    DES3: "DES3",
    AES128: "AES128",
    AES192: "AES192",
    AES256: "AES256",
    GCMAES128: "GCMAES128",
    GCMAES192: "GCMAES192",
    GCMAES256: "GCMAES256",
};
exports.IpsecIntegrity = {
    MD5: "MD5",
    SHA1: "SHA1",
    SHA256: "SHA256",
    GCMAES128: "GCMAES128",
    GCMAES192: "GCMAES192",
    GCMAES256: "GCMAES256",
};
exports.LoadBalancerOutboundRuleProtocol = {
    Tcp: "Tcp",
    Udp: "Udp",
    All: "All",
};
exports.LoadBalancerSkuName = {
    Basic: "Basic",
    Standard: "Standard",
};
exports.LoadDistribution = {
    Default: "Default",
    SourceIP: "SourceIP",
    SourceIPProtocol: "SourceIPProtocol",
};
exports.NatGatewaySkuName = {
    Standard: "Standard",
};
exports.PcProtocol = {
    TCP: "TCP",
    UDP: "UDP",
    Any: "Any",
};
exports.PfsGroup = {
    None: "None",
    PFS1: "PFS1",
    PFS2: "PFS2",
    PFS2048: "PFS2048",
    ECP256: "ECP256",
    ECP384: "ECP384",
    PFS24: "PFS24",
    PFS14: "PFS14",
    PFSMM: "PFSMM",
};
exports.ProbeProtocol = {
    Http: "Http",
    Tcp: "Tcp",
    Https: "Https",
};
exports.PublicIPAddressSkuName = {
    Basic: "Basic",
    Standard: "Standard",
};
exports.PublicIPPrefixSkuName = {
    Standard: "Standard",
};
exports.ResourceIdentityType = {
    SystemAssigned: "SystemAssigned",
    UserAssigned: "UserAssigned",
    SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned",
    None: "None",
};
exports.RouteFilterRuleType = {
    Community: "Community",
};
exports.RouteNextHopType = {
    VirtualNetworkGateway: "VirtualNetworkGateway",
    VnetLocal: "VnetLocal",
    Internet: "Internet",
    VirtualAppliance: "VirtualAppliance",
    None: "None",
};
exports.SecurityRuleAccess = {
    Allow: "Allow",
    Deny: "Deny",
};
exports.SecurityRuleDirection = {
    Inbound: "Inbound",
    Outbound: "Outbound",
};
exports.SecurityRuleProtocol = {
    Tcp: "Tcp",
    Udp: "Udp",
    Icmp: "Icmp",
    Esp: "Esp",
    Asterisk: "*",
};
exports.ServiceProviderProvisioningState = {
    NotProvisioned: "NotProvisioned",
    Provisioning: "Provisioning",
    Provisioned: "Provisioned",
    Deprovisioning: "Deprovisioning",
};
exports.TransportProtocol = {
    Udp: "Udp",
    Tcp: "Tcp",
    All: "All",
};
exports.VirtualNetworkGatewayConnectionProtocol = {
    IKEv2: "IKEv2",
    IKEv1: "IKEv1",
};
exports.VirtualNetworkGatewayConnectionType = {
    IPsec: "IPsec",
    Vnet2Vnet: "Vnet2Vnet",
    ExpressRoute: "ExpressRoute",
    VPNClient: "VPNClient",
};
exports.VirtualNetworkGatewaySkuName = {
    Basic: "Basic",
    HighPerformance: "HighPerformance",
    Standard: "Standard",
    UltraPerformance: "UltraPerformance",
    VpnGw1: "VpnGw1",
    VpnGw2: "VpnGw2",
    VpnGw3: "VpnGw3",
    VpnGw1AZ: "VpnGw1AZ",
    VpnGw2AZ: "VpnGw2AZ",
    VpnGw3AZ: "VpnGw3AZ",
    ErGw1AZ: "ErGw1AZ",
    ErGw2AZ: "ErGw2AZ",
    ErGw3AZ: "ErGw3AZ",
};
exports.VirtualNetworkGatewaySkuTier = {
    Basic: "Basic",
    HighPerformance: "HighPerformance",
    Standard: "Standard",
    UltraPerformance: "UltraPerformance",
    VpnGw1: "VpnGw1",
    VpnGw2: "VpnGw2",
    VpnGw3: "VpnGw3",
    VpnGw1AZ: "VpnGw1AZ",
    VpnGw2AZ: "VpnGw2AZ",
    VpnGw3AZ: "VpnGw3AZ",
    ErGw1AZ: "ErGw1AZ",
    ErGw2AZ: "ErGw2AZ",
    ErGw3AZ: "ErGw3AZ",
};
exports.VirtualNetworkGatewayType = {
    Vpn: "Vpn",
    ExpressRoute: "ExpressRoute",
};
exports.VirtualNetworkPeeringState = {
    Initiated: "Initiated",
    Connected: "Connected",
    Disconnected: "Disconnected",
};
exports.VpnClientProtocol = {
    IkeV2: "IkeV2",
    SSTP: "SSTP",
    OpenVPN: "OpenVPN",
};
exports.VpnGatewayTunnelingProtocol = {
    IkeV2: "IkeV2",
    OpenVPN: "OpenVPN",
};
exports.VpnType = {
    PolicyBased: "PolicyBased",
    RouteBased: "RouteBased",
};
exports.WebApplicationFirewallAction = {
    Allow: "Allow",
    Block: "Block",
    Log: "Log",
};
exports.WebApplicationFirewallEnabledState = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.WebApplicationFirewallMatchVariable = {
    RemoteAddr: "RemoteAddr",
    RequestMethod: "RequestMethod",
    QueryString: "QueryString",
    PostArgs: "PostArgs",
    RequestUri: "RequestUri",
    RequestHeaders: "RequestHeaders",
    RequestBody: "RequestBody",
    RequestCookies: "RequestCookies",
};
exports.WebApplicationFirewallMode = {
    Prevention: "Prevention",
    Detection: "Detection",
};
exports.WebApplicationFirewallOperator = {
    IPMatch: "IPMatch",
    Equal: "Equal",
    Contains: "Contains",
    LessThan: "LessThan",
    GreaterThan: "GreaterThan",
    LessThanOrEqual: "LessThanOrEqual",
    GreaterThanOrEqual: "GreaterThanOrEqual",
    BeginsWith: "BeginsWith",
    EndsWith: "EndsWith",
    Regex: "Regex",
};
exports.WebApplicationFirewallRuleType = {
    MatchRule: "MatchRule",
    Invalid: "Invalid",
};
exports.WebApplicationFirewallTransform = {
    Lowercase: "Lowercase",
    Trim: "Trim",
    UrlDecode: "UrlDecode",
    UrlEncode: "UrlEncode",
    RemoveNulls: "RemoveNulls",
    HtmlEntityDecode: "HtmlEntityDecode",
};
//# sourceMappingURL=data:application/json;base64,