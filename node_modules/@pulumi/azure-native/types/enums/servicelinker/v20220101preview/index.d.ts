export declare const AuthType: {
    readonly SystemAssignedIdentity: "systemAssignedIdentity";
    readonly UserAssignedIdentity: "userAssignedIdentity";
    readonly ServicePrincipalSecret: "servicePrincipalSecret";
    readonly ServicePrincipalCertificate: "servicePrincipalCertificate";
    readonly Secret: "secret";
};
/**
 * The authentication type.
 */
export declare type AuthType = (typeof AuthType)[keyof typeof AuthType];
export declare const ClientType: {
    readonly None: "none";
    readonly Dotnet: "dotnet";
    readonly Java: "java";
    readonly Python: "python";
    readonly Go: "go";
    readonly Php: "php";
    readonly Ruby: "ruby";
    readonly Django: "django";
    readonly Nodejs: "nodejs";
    readonly SpringBoot: "springBoot";
};
/**
 * The application client type
 */
export declare type ClientType = (typeof ClientType)[keyof typeof ClientType];
export declare const SecretType: {
    readonly RawValue: "rawValue";
    readonly KeyVaultSecretUri: "keyVaultSecretUri";
    readonly KeyVaultSecretReference: "keyVaultSecretReference";
};
/**
 * The secret type.
 */
export declare type SecretType = (typeof SecretType)[keyof typeof SecretType];
export declare const Type: {
    readonly AzureResource: "AzureResource";
    readonly ConfluentBootstrapServer: "ConfluentBootstrapServer";
    readonly ConfluentSchemaRegistry: "ConfluentSchemaRegistry";
};
/**
 * The target service type.
 */
export declare type Type = (typeof Type)[keyof typeof Type];
export declare const VNetSolutionType: {
    readonly ServiceEndpoint: "serviceEndpoint";
    readonly PrivateLink: "privateLink";
};
/**
 * Type of VNet solution.
 */
export declare type VNetSolutionType = (typeof VNetSolutionType)[keyof typeof VNetSolutionType];
