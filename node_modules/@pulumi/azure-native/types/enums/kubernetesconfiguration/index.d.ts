import * as v20191101preview from "./v20191101preview";
import * as v20200701preview from "./v20200701preview";
import * as v20201001preview from "./v20201001preview";
import * as v20210301 from "./v20210301";
import * as v20210501preview from "./v20210501preview";
import * as v20210901 from "./v20210901";
import * as v20211101preview from "./v20211101preview";
import * as v20220101preview from "./v20220101preview";
import * as v20220301 from "./v20220301";
import * as v20220402preview from "./v20220402preview";
export { v20191101preview, v20200701preview, v20201001preview, v20210301, v20210501preview, v20210901, v20211101preview, v20220101preview, v20220301, v20220402preview, };
export declare const KustomizationValidationType: {
    readonly None: "none";
    readonly Client: "client";
    readonly Server: "server";
};
/**
 * Specify whether to validate the Kubernetes objects referenced in the Kustomization before applying them to the cluster.
 */
export declare type KustomizationValidationType = (typeof KustomizationValidationType)[keyof typeof KustomizationValidationType];
export declare const LevelType: {
    readonly Error: "Error";
    readonly Warning: "Warning";
    readonly Information: "Information";
};
/**
 * Level of the status.
 */
export declare type LevelType = (typeof LevelType)[keyof typeof LevelType];
export declare const OperatorScopeType: {
    readonly Cluster: "cluster";
    readonly Namespace: "namespace";
};
/**
 * Scope at which the operator will be installed.
 */
export declare type OperatorScopeType = (typeof OperatorScopeType)[keyof typeof OperatorScopeType];
export declare const OperatorType: {
    readonly Flux: "Flux";
};
/**
 * Type of the operator
 */
export declare type OperatorType = (typeof OperatorType)[keyof typeof OperatorType];
export declare const PrivateEndpointServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
};
/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export declare type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];
export declare const PublicNetworkAccessType: {
    /**
     * Allows Azure Arc agents to communicate with Azure Arc services over both public (internet) and private endpoints.
     */
    readonly Enabled: "Enabled";
    /**
     * Does not allow Azure Arc agents to communicate with Azure Arc services over public (internet) endpoints. The agents must use the private link.
     */
    readonly Disabled: "Disabled";
};
/**
 * Indicates whether machines associated with the private link scope can also use public Azure Arc service endpoints.
 */
export declare type PublicNetworkAccessType = (typeof PublicNetworkAccessType)[keyof typeof PublicNetworkAccessType];
export declare const ResourceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly None: "None";
};
/**
 * The type of identity used for the configuration. Type 'SystemAssigned' will use an implicitly created identity. Type 'None' will not use Managed Identity for the configuration.
 */
export declare type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const ScopeType: {
    readonly Cluster: "cluster";
    readonly Namespace: "namespace";
};
/**
 * Scope at which the operator will be installed.
 */
export declare type ScopeType = (typeof ScopeType)[keyof typeof ScopeType];
export declare const SourceKindType: {
    readonly GitRepository: "GitRepository";
};
/**
 * Source Kind to pull the configuration data from.
 */
export declare type SourceKindType = (typeof SourceKindType)[keyof typeof SourceKindType];
