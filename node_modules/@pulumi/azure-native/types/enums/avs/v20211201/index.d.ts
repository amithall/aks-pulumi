export declare const AddonType: {
    readonly SRM: "SRM";
    readonly VR: "VR";
    readonly HCX: "HCX";
};
/**
 * The type of private cloud addon
 */
export declare type AddonType = (typeof AddonType)[keyof typeof AddonType];
export declare const AffinityType: {
    readonly Affinity: "Affinity";
    readonly AntiAffinity: "AntiAffinity";
};
/**
 * placement policy affinity type
 */
export declare type AffinityType = (typeof AffinityType)[keyof typeof AffinityType];
export declare const AvailabilityStrategy: {
    readonly SingleZone: "SingleZone";
    readonly DualZone: "DualZone";
};
/**
 * The availability strategy for the private cloud
 */
export declare type AvailabilityStrategy = (typeof AvailabilityStrategy)[keyof typeof AvailabilityStrategy];
export declare const DhcpTypeEnum: {
    readonly SERVER: "SERVER";
    readonly RELAY: "RELAY";
};
/**
 * Type of DHCP: SERVER or RELAY.
 */
export declare type DhcpTypeEnum = (typeof DhcpTypeEnum)[keyof typeof DhcpTypeEnum];
export declare const DnsServiceLogLevelEnum: {
    readonly DEBUG: "DEBUG";
    readonly INFO: "INFO";
    readonly WARNING: "WARNING";
    readonly ERROR: "ERROR";
    readonly FATAL: "FATAL";
};
/**
 * DNS Service log level.
 */
export declare type DnsServiceLogLevelEnum = (typeof DnsServiceLogLevelEnum)[keyof typeof DnsServiceLogLevelEnum];
export declare const EncryptionState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Status of customer managed encryption key
 */
export declare type EncryptionState = (typeof EncryptionState)[keyof typeof EncryptionState];
export declare const InternetEnum: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Connectivity to internet is enabled or disabled
 */
export declare type InternetEnum = (typeof InternetEnum)[keyof typeof InternetEnum];
export declare const MountOptionEnum: {
    readonly MOUNT: "MOUNT";
    readonly ATTACH: "ATTACH";
};
/**
 * Mode that describes whether the LUN has to be mounted as a datastore or attached as a LUN
 */
export declare type MountOptionEnum = (typeof MountOptionEnum)[keyof typeof MountOptionEnum];
export declare const PlacementPolicyState: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether the placement policy is enabled or disabled
 */
export declare type PlacementPolicyState = (typeof PlacementPolicyState)[keyof typeof PlacementPolicyState];
export declare const PlacementPolicyType: {
    readonly VmVm: "VmVm";
    readonly VmHost: "VmHost";
};
/**
 * placement policy type
 */
export declare type PlacementPolicyType = (typeof PlacementPolicyType)[keyof typeof PlacementPolicyType];
export declare const PortMirroringDirectionEnum: {
    readonly INGRESS: "INGRESS";
    readonly EGRESS: "EGRESS";
    readonly BIDIRECTIONAL: "BIDIRECTIONAL";
};
/**
 * Direction of port mirroring profile.
 */
export declare type PortMirroringDirectionEnum = (typeof PortMirroringDirectionEnum)[keyof typeof PortMirroringDirectionEnum];
export declare const ResourceIdentityType: {
    readonly SystemAssigned: "SystemAssigned";
    readonly None: "None";
};
/**
 * The type of identity used for the private cloud. The type 'SystemAssigned' refers to an implicitly created identity. The type 'None' will remove any identities from the Private Cloud.
 */
export declare type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const ScriptExecutionParameterType: {
    readonly Value: "Value";
    readonly SecureValue: "SecureValue";
    readonly Credential: "Credential";
};
/**
 * The type of execution parameter
 */
export declare type ScriptExecutionParameterType = (typeof ScriptExecutionParameterType)[keyof typeof ScriptExecutionParameterType];
export declare const SslEnum: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Protect LDAP communication using SSL certificate (LDAPS)
 */
export declare type SslEnum = (typeof SslEnum)[keyof typeof SslEnum];
