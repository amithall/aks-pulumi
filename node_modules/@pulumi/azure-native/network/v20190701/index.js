"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
// Export members:
__exportStar(require("./applicationGateway"), exports);
__exportStar(require("./applicationSecurityGroup"), exports);
__exportStar(require("./azureFirewall"), exports);
__exportStar(require("./bastionHost"), exports);
__exportStar(require("./connectionMonitor"), exports);
__exportStar(require("./ddosCustomPolicy"), exports);
__exportStar(require("./ddosProtectionPlan"), exports);
__exportStar(require("./expressRouteCircuit"), exports);
__exportStar(require("./expressRouteCircuitAuthorization"), exports);
__exportStar(require("./expressRouteCircuitConnection"), exports);
__exportStar(require("./expressRouteCircuitPeering"), exports);
__exportStar(require("./expressRouteConnection"), exports);
__exportStar(require("./expressRouteCrossConnectionPeering"), exports);
__exportStar(require("./expressRouteGateway"), exports);
__exportStar(require("./expressRoutePort"), exports);
__exportStar(require("./firewallPolicy"), exports);
__exportStar(require("./firewallPolicyRuleGroup"), exports);
__exportStar(require("./getApplicationGateway"), exports);
__exportStar(require("./getApplicationGatewayBackendHealthOnDemand"), exports);
__exportStar(require("./getApplicationSecurityGroup"), exports);
__exportStar(require("./getAzureFirewall"), exports);
__exportStar(require("./getBastionHost"), exports);
__exportStar(require("./getConnectionMonitor"), exports);
__exportStar(require("./getDdosCustomPolicy"), exports);
__exportStar(require("./getDdosProtectionPlan"), exports);
__exportStar(require("./getExpressRouteCircuit"), exports);
__exportStar(require("./getExpressRouteCircuitAuthorization"), exports);
__exportStar(require("./getExpressRouteCircuitConnection"), exports);
__exportStar(require("./getExpressRouteCircuitPeering"), exports);
__exportStar(require("./getExpressRouteConnection"), exports);
__exportStar(require("./getExpressRouteCrossConnectionPeering"), exports);
__exportStar(require("./getExpressRouteGateway"), exports);
__exportStar(require("./getExpressRoutePort"), exports);
__exportStar(require("./getFirewallPolicy"), exports);
__exportStar(require("./getFirewallPolicyRuleGroup"), exports);
__exportStar(require("./getInboundNatRule"), exports);
__exportStar(require("./getLoadBalancer"), exports);
__exportStar(require("./getLocalNetworkGateway"), exports);
__exportStar(require("./getNatGateway"), exports);
__exportStar(require("./getNetworkInterface"), exports);
__exportStar(require("./getNetworkInterfaceTapConfiguration"), exports);
__exportStar(require("./getNetworkProfile"), exports);
__exportStar(require("./getNetworkSecurityGroup"), exports);
__exportStar(require("./getNetworkWatcher"), exports);
__exportStar(require("./getP2sVpnGateway"), exports);
__exportStar(require("./getP2sVpnGatewayP2sVpnConnectionHealth"), exports);
__exportStar(require("./getP2sVpnServerConfiguration"), exports);
__exportStar(require("./getPacketCapture"), exports);
__exportStar(require("./getPrivateEndpoint"), exports);
__exportStar(require("./getPrivateLinkService"), exports);
__exportStar(require("./getPublicIPAddress"), exports);
__exportStar(require("./getPublicIPPrefix"), exports);
__exportStar(require("./getRoute"), exports);
__exportStar(require("./getRouteFilter"), exports);
__exportStar(require("./getRouteFilterRule"), exports);
__exportStar(require("./getRouteTable"), exports);
__exportStar(require("./getSecurityRule"), exports);
__exportStar(require("./getServiceEndpointPolicy"), exports);
__exportStar(require("./getServiceEndpointPolicyDefinition"), exports);
__exportStar(require("./getSubnet"), exports);
__exportStar(require("./getVirtualHub"), exports);
__exportStar(require("./getVirtualNetwork"), exports);
__exportStar(require("./getVirtualNetworkGateway"), exports);
__exportStar(require("./getVirtualNetworkGatewayAdvertisedRoutes"), exports);
__exportStar(require("./getVirtualNetworkGatewayBgpPeerStatus"), exports);
__exportStar(require("./getVirtualNetworkGatewayConnection"), exports);
__exportStar(require("./getVirtualNetworkGatewayLearnedRoutes"), exports);
__exportStar(require("./getVirtualNetworkGatewayVpnclientConnectionHealth"), exports);
__exportStar(require("./getVirtualNetworkGatewayVpnclientIpsecParameters"), exports);
__exportStar(require("./getVirtualNetworkPeering"), exports);
__exportStar(require("./getVirtualNetworkTap"), exports);
__exportStar(require("./getVirtualRouter"), exports);
__exportStar(require("./getVirtualRouterPeering"), exports);
__exportStar(require("./getVirtualWan"), exports);
__exportStar(require("./getVpnConnection"), exports);
__exportStar(require("./getVpnGateway"), exports);
__exportStar(require("./getVpnSite"), exports);
__exportStar(require("./getWebApplicationFirewallPolicy"), exports);
__exportStar(require("./inboundNatRule"), exports);
__exportStar(require("./loadBalancer"), exports);
__exportStar(require("./localNetworkGateway"), exports);
__exportStar(require("./natGateway"), exports);
__exportStar(require("./networkInterface"), exports);
__exportStar(require("./networkInterfaceTapConfiguration"), exports);
__exportStar(require("./networkProfile"), exports);
__exportStar(require("./networkSecurityGroup"), exports);
__exportStar(require("./networkWatcher"), exports);
__exportStar(require("./p2sVpnGateway"), exports);
__exportStar(require("./p2sVpnServerConfiguration"), exports);
__exportStar(require("./packetCapture"), exports);
__exportStar(require("./privateEndpoint"), exports);
__exportStar(require("./privateLinkService"), exports);
__exportStar(require("./publicIPAddress"), exports);
__exportStar(require("./publicIPPrefix"), exports);
__exportStar(require("./route"), exports);
__exportStar(require("./routeFilter"), exports);
__exportStar(require("./routeFilterRule"), exports);
__exportStar(require("./routeTable"), exports);
__exportStar(require("./securityRule"), exports);
__exportStar(require("./serviceEndpointPolicy"), exports);
__exportStar(require("./serviceEndpointPolicyDefinition"), exports);
__exportStar(require("./subnet"), exports);
__exportStar(require("./virtualHub"), exports);
__exportStar(require("./virtualNetwork"), exports);
__exportStar(require("./virtualNetworkGateway"), exports);
__exportStar(require("./virtualNetworkGatewayConnection"), exports);
__exportStar(require("./virtualNetworkPeering"), exports);
__exportStar(require("./virtualNetworkTap"), exports);
__exportStar(require("./virtualRouter"), exports);
__exportStar(require("./virtualRouterPeering"), exports);
__exportStar(require("./virtualWan"), exports);
__exportStar(require("./vpnConnection"), exports);
__exportStar(require("./vpnGateway"), exports);
__exportStar(require("./vpnSite"), exports);
__exportStar(require("./webApplicationFirewallPolicy"), exports);
// Export enums:
__exportStar(require("../../types/enums/network/v20190701"), exports);
// Import resources to register:
const applicationGateway_1 = require("./applicationGateway");
const applicationSecurityGroup_1 = require("./applicationSecurityGroup");
const azureFirewall_1 = require("./azureFirewall");
const bastionHost_1 = require("./bastionHost");
const connectionMonitor_1 = require("./connectionMonitor");
const ddosCustomPolicy_1 = require("./ddosCustomPolicy");
const ddosProtectionPlan_1 = require("./ddosProtectionPlan");
const expressRouteCircuit_1 = require("./expressRouteCircuit");
const expressRouteCircuitAuthorization_1 = require("./expressRouteCircuitAuthorization");
const expressRouteCircuitConnection_1 = require("./expressRouteCircuitConnection");
const expressRouteCircuitPeering_1 = require("./expressRouteCircuitPeering");
const expressRouteConnection_1 = require("./expressRouteConnection");
const expressRouteCrossConnectionPeering_1 = require("./expressRouteCrossConnectionPeering");
const expressRouteGateway_1 = require("./expressRouteGateway");
const expressRoutePort_1 = require("./expressRoutePort");
const firewallPolicy_1 = require("./firewallPolicy");
const firewallPolicyRuleGroup_1 = require("./firewallPolicyRuleGroup");
const inboundNatRule_1 = require("./inboundNatRule");
const loadBalancer_1 = require("./loadBalancer");
const localNetworkGateway_1 = require("./localNetworkGateway");
const natGateway_1 = require("./natGateway");
const networkInterface_1 = require("./networkInterface");
const networkInterfaceTapConfiguration_1 = require("./networkInterfaceTapConfiguration");
const networkProfile_1 = require("./networkProfile");
const networkSecurityGroup_1 = require("./networkSecurityGroup");
const networkWatcher_1 = require("./networkWatcher");
const p2sVpnGateway_1 = require("./p2sVpnGateway");
const p2sVpnServerConfiguration_1 = require("./p2sVpnServerConfiguration");
const packetCapture_1 = require("./packetCapture");
const privateEndpoint_1 = require("./privateEndpoint");
const privateLinkService_1 = require("./privateLinkService");
const publicIPAddress_1 = require("./publicIPAddress");
const publicIPPrefix_1 = require("./publicIPPrefix");
const route_1 = require("./route");
const routeFilter_1 = require("./routeFilter");
const routeFilterRule_1 = require("./routeFilterRule");
const routeTable_1 = require("./routeTable");
const securityRule_1 = require("./securityRule");
const serviceEndpointPolicy_1 = require("./serviceEndpointPolicy");
const serviceEndpointPolicyDefinition_1 = require("./serviceEndpointPolicyDefinition");
const subnet_1 = require("./subnet");
const virtualHub_1 = require("./virtualHub");
const virtualNetwork_1 = require("./virtualNetwork");
const virtualNetworkGateway_1 = require("./virtualNetworkGateway");
const virtualNetworkGatewayConnection_1 = require("./virtualNetworkGatewayConnection");
const virtualNetworkPeering_1 = require("./virtualNetworkPeering");
const virtualNetworkTap_1 = require("./virtualNetworkTap");
const virtualRouter_1 = require("./virtualRouter");
const virtualRouterPeering_1 = require("./virtualRouterPeering");
const virtualWan_1 = require("./virtualWan");
const vpnConnection_1 = require("./vpnConnection");
const vpnGateway_1 = require("./vpnGateway");
const vpnSite_1 = require("./vpnSite");
const webApplicationFirewallPolicy_1 = require("./webApplicationFirewallPolicy");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure-native:network/v20190701:ApplicationGateway":
                return new applicationGateway_1.ApplicationGateway(name, undefined, { urn });
            case "azure-native:network/v20190701:ApplicationSecurityGroup":
                return new applicationSecurityGroup_1.ApplicationSecurityGroup(name, undefined, { urn });
            case "azure-native:network/v20190701:AzureFirewall":
                return new azureFirewall_1.AzureFirewall(name, undefined, { urn });
            case "azure-native:network/v20190701:BastionHost":
                return new bastionHost_1.BastionHost(name, undefined, { urn });
            case "azure-native:network/v20190701:ConnectionMonitor":
                return new connectionMonitor_1.ConnectionMonitor(name, undefined, { urn });
            case "azure-native:network/v20190701:DdosCustomPolicy":
                return new ddosCustomPolicy_1.DdosCustomPolicy(name, undefined, { urn });
            case "azure-native:network/v20190701:DdosProtectionPlan":
                return new ddosProtectionPlan_1.DdosProtectionPlan(name, undefined, { urn });
            case "azure-native:network/v20190701:ExpressRouteCircuit":
                return new expressRouteCircuit_1.ExpressRouteCircuit(name, undefined, { urn });
            case "azure-native:network/v20190701:ExpressRouteCircuitAuthorization":
                return new expressRouteCircuitAuthorization_1.ExpressRouteCircuitAuthorization(name, undefined, { urn });
            case "azure-native:network/v20190701:ExpressRouteCircuitConnection":
                return new expressRouteCircuitConnection_1.ExpressRouteCircuitConnection(name, undefined, { urn });
            case "azure-native:network/v20190701:ExpressRouteCircuitPeering":
                return new expressRouteCircuitPeering_1.ExpressRouteCircuitPeering(name, undefined, { urn });
            case "azure-native:network/v20190701:ExpressRouteConnection":
                return new expressRouteConnection_1.ExpressRouteConnection(name, undefined, { urn });
            case "azure-native:network/v20190701:ExpressRouteCrossConnectionPeering":
                return new expressRouteCrossConnectionPeering_1.ExpressRouteCrossConnectionPeering(name, undefined, { urn });
            case "azure-native:network/v20190701:ExpressRouteGateway":
                return new expressRouteGateway_1.ExpressRouteGateway(name, undefined, { urn });
            case "azure-native:network/v20190701:ExpressRoutePort":
                return new expressRoutePort_1.ExpressRoutePort(name, undefined, { urn });
            case "azure-native:network/v20190701:FirewallPolicy":
                return new firewallPolicy_1.FirewallPolicy(name, undefined, { urn });
            case "azure-native:network/v20190701:FirewallPolicyRuleGroup":
                return new firewallPolicyRuleGroup_1.FirewallPolicyRuleGroup(name, undefined, { urn });
            case "azure-native:network/v20190701:InboundNatRule":
                return new inboundNatRule_1.InboundNatRule(name, undefined, { urn });
            case "azure-native:network/v20190701:LoadBalancer":
                return new loadBalancer_1.LoadBalancer(name, undefined, { urn });
            case "azure-native:network/v20190701:LocalNetworkGateway":
                return new localNetworkGateway_1.LocalNetworkGateway(name, undefined, { urn });
            case "azure-native:network/v20190701:NatGateway":
                return new natGateway_1.NatGateway(name, undefined, { urn });
            case "azure-native:network/v20190701:NetworkInterface":
                return new networkInterface_1.NetworkInterface(name, undefined, { urn });
            case "azure-native:network/v20190701:NetworkInterfaceTapConfiguration":
                return new networkInterfaceTapConfiguration_1.NetworkInterfaceTapConfiguration(name, undefined, { urn });
            case "azure-native:network/v20190701:NetworkProfile":
                return new networkProfile_1.NetworkProfile(name, undefined, { urn });
            case "azure-native:network/v20190701:NetworkSecurityGroup":
                return new networkSecurityGroup_1.NetworkSecurityGroup(name, undefined, { urn });
            case "azure-native:network/v20190701:NetworkWatcher":
                return new networkWatcher_1.NetworkWatcher(name, undefined, { urn });
            case "azure-native:network/v20190701:P2sVpnGateway":
                return new p2sVpnGateway_1.P2sVpnGateway(name, undefined, { urn });
            case "azure-native:network/v20190701:P2sVpnServerConfiguration":
                return new p2sVpnServerConfiguration_1.P2sVpnServerConfiguration(name, undefined, { urn });
            case "azure-native:network/v20190701:PacketCapture":
                return new packetCapture_1.PacketCapture(name, undefined, { urn });
            case "azure-native:network/v20190701:PrivateEndpoint":
                return new privateEndpoint_1.PrivateEndpoint(name, undefined, { urn });
            case "azure-native:network/v20190701:PrivateLinkService":
                return new privateLinkService_1.PrivateLinkService(name, undefined, { urn });
            case "azure-native:network/v20190701:PublicIPAddress":
                return new publicIPAddress_1.PublicIPAddress(name, undefined, { urn });
            case "azure-native:network/v20190701:PublicIPPrefix":
                return new publicIPPrefix_1.PublicIPPrefix(name, undefined, { urn });
            case "azure-native:network/v20190701:Route":
                return new route_1.Route(name, undefined, { urn });
            case "azure-native:network/v20190701:RouteFilter":
                return new routeFilter_1.RouteFilter(name, undefined, { urn });
            case "azure-native:network/v20190701:RouteFilterRule":
                return new routeFilterRule_1.RouteFilterRule(name, undefined, { urn });
            case "azure-native:network/v20190701:RouteTable":
                return new routeTable_1.RouteTable(name, undefined, { urn });
            case "azure-native:network/v20190701:SecurityRule":
                return new securityRule_1.SecurityRule(name, undefined, { urn });
            case "azure-native:network/v20190701:ServiceEndpointPolicy":
                return new serviceEndpointPolicy_1.ServiceEndpointPolicy(name, undefined, { urn });
            case "azure-native:network/v20190701:ServiceEndpointPolicyDefinition":
                return new serviceEndpointPolicyDefinition_1.ServiceEndpointPolicyDefinition(name, undefined, { urn });
            case "azure-native:network/v20190701:Subnet":
                return new subnet_1.Subnet(name, undefined, { urn });
            case "azure-native:network/v20190701:VirtualHub":
                return new virtualHub_1.VirtualHub(name, undefined, { urn });
            case "azure-native:network/v20190701:VirtualNetwork":
                return new virtualNetwork_1.VirtualNetwork(name, undefined, { urn });
            case "azure-native:network/v20190701:VirtualNetworkGateway":
                return new virtualNetworkGateway_1.VirtualNetworkGateway(name, undefined, { urn });
            case "azure-native:network/v20190701:VirtualNetworkGatewayConnection":
                return new virtualNetworkGatewayConnection_1.VirtualNetworkGatewayConnection(name, undefined, { urn });
            case "azure-native:network/v20190701:VirtualNetworkPeering":
                return new virtualNetworkPeering_1.VirtualNetworkPeering(name, undefined, { urn });
            case "azure-native:network/v20190701:VirtualNetworkTap":
                return new virtualNetworkTap_1.VirtualNetworkTap(name, undefined, { urn });
            case "azure-native:network/v20190701:VirtualRouter":
                return new virtualRouter_1.VirtualRouter(name, undefined, { urn });
            case "azure-native:network/v20190701:VirtualRouterPeering":
                return new virtualRouterPeering_1.VirtualRouterPeering(name, undefined, { urn });
            case "azure-native:network/v20190701:VirtualWan":
                return new virtualWan_1.VirtualWan(name, undefined, { urn });
            case "azure-native:network/v20190701:VpnConnection":
                return new vpnConnection_1.VpnConnection(name, undefined, { urn });
            case "azure-native:network/v20190701:VpnGateway":
                return new vpnGateway_1.VpnGateway(name, undefined, { urn });
            case "azure-native:network/v20190701:VpnSite":
                return new vpnSite_1.VpnSite(name, undefined, { urn });
            case "azure-native:network/v20190701:WebApplicationFirewallPolicy":
                return new webApplicationFirewallPolicy_1.WebApplicationFirewallPolicy(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "network/v20190701", _module);
//# sourceMappingURL=data:application/json;base64,