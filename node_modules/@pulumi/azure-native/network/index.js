"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.v20201101 = exports.v20200801 = exports.v20200701 = exports.v20200601 = exports.v20200501 = exports.v20200401preview = exports.v20200401 = exports.v20200301 = exports.v20200101 = exports.v20191201 = exports.v20191101 = exports.v20191001 = exports.v20190901 = exports.v20190801 = exports.v20190701 = exports.v20190601 = exports.v20190501 = exports.v20190401 = exports.v20190301 = exports.v20190201 = exports.v20181201 = exports.v20181101 = exports.v20181001 = exports.v20180901 = exports.v20180801 = exports.v20180701 = exports.v20180601 = exports.v20180501 = exports.v20180401 = exports.v20180301preview = exports.v20180301 = exports.v20180201 = exports.v20180101 = exports.v20171101 = exports.v20171001 = exports.v20170901preview = exports.v20170901 = exports.v20170801 = exports.v20170601 = exports.v20170501 = exports.v20170301 = exports.v20161201 = exports.v20160901 = exports.v20160601 = exports.v20160401 = exports.v20160330 = exports.v20151101 = exports.v20150615 = exports.v20150504preview = exports.v20150501preview = void 0;
exports.v20220201preview = exports.v20210801 = exports.v20210501preview = exports.v20210501 = exports.v20210301preview = exports.v20210301 = exports.v20210201preview = exports.v20210201 = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./adminRule"), exports);
__exportStar(require("./adminRuleCollection"), exports);
__exportStar(require("./applicationGateway"), exports);
__exportStar(require("./applicationGatewayPrivateEndpointConnection"), exports);
__exportStar(require("./applicationSecurityGroup"), exports);
__exportStar(require("./azureFirewall"), exports);
__exportStar(require("./bastionHost"), exports);
__exportStar(require("./configurationPolicyGroup"), exports);
__exportStar(require("./connectionMonitor"), exports);
__exportStar(require("./connectivityConfiguration"), exports);
__exportStar(require("./customIPPrefix"), exports);
__exportStar(require("./ddosCustomPolicy"), exports);
__exportStar(require("./ddosProtectionPlan"), exports);
__exportStar(require("./defaultAdminRule"), exports);
__exportStar(require("./defaultUserRule"), exports);
__exportStar(require("./dnsForwardingRuleset"), exports);
__exportStar(require("./dnsResolver"), exports);
__exportStar(require("./dscpConfiguration"), exports);
__exportStar(require("./endpoint"), exports);
__exportStar(require("./experiment"), exports);
__exportStar(require("./expressRouteCircuit"), exports);
__exportStar(require("./expressRouteCircuitAuthorization"), exports);
__exportStar(require("./expressRouteCircuitConnection"), exports);
__exportStar(require("./expressRouteCircuitPeering"), exports);
__exportStar(require("./expressRouteConnection"), exports);
__exportStar(require("./expressRouteCrossConnectionPeering"), exports);
__exportStar(require("./expressRouteGateway"), exports);
__exportStar(require("./expressRoutePort"), exports);
__exportStar(require("./expressRoutePortAuthorization"), exports);
__exportStar(require("./firewallPolicy"), exports);
__exportStar(require("./firewallPolicyRuleCollectionGroup"), exports);
__exportStar(require("./firewallPolicyRuleGroup"), exports);
__exportStar(require("./flowLog"), exports);
__exportStar(require("./forwardingRule"), exports);
__exportStar(require("./frontDoor"), exports);
__exportStar(require("./getActiveSessions"), exports);
__exportStar(require("./getAdminRule"), exports);
__exportStar(require("./getAdminRuleCollection"), exports);
__exportStar(require("./getApplicationGateway"), exports);
__exportStar(require("./getApplicationGatewayBackendHealthOnDemand"), exports);
__exportStar(require("./getApplicationGatewayPrivateEndpointConnection"), exports);
__exportStar(require("./getApplicationSecurityGroup"), exports);
__exportStar(require("./getAzureFirewall"), exports);
__exportStar(require("./getBastionHost"), exports);
__exportStar(require("./getBastionShareableLink"), exports);
__exportStar(require("./getConfigurationPolicyGroup"), exports);
__exportStar(require("./getConnectionMonitor"), exports);
__exportStar(require("./getConnectivityConfiguration"), exports);
__exportStar(require("./getCustomIPPrefix"), exports);
__exportStar(require("./getDdosCustomPolicy"), exports);
__exportStar(require("./getDdosProtectionPlan"), exports);
__exportStar(require("./getDefaultAdminRule"), exports);
__exportStar(require("./getDefaultUserRule"), exports);
__exportStar(require("./getDnsForwardingRuleset"), exports);
__exportStar(require("./getDnsResolver"), exports);
__exportStar(require("./getDnsResourceReferenceByTarResources"), exports);
__exportStar(require("./getDscpConfiguration"), exports);
__exportStar(require("./getEndpoint"), exports);
__exportStar(require("./getExperiment"), exports);
__exportStar(require("./getExpressRouteCircuit"), exports);
__exportStar(require("./getExpressRouteCircuitAuthorization"), exports);
__exportStar(require("./getExpressRouteCircuitConnection"), exports);
__exportStar(require("./getExpressRouteCircuitPeering"), exports);
__exportStar(require("./getExpressRouteConnection"), exports);
__exportStar(require("./getExpressRouteCrossConnectionPeering"), exports);
__exportStar(require("./getExpressRouteGateway"), exports);
__exportStar(require("./getExpressRoutePort"), exports);
__exportStar(require("./getExpressRoutePortAuthorization"), exports);
__exportStar(require("./getFirewallPolicy"), exports);
__exportStar(require("./getFirewallPolicyRuleCollectionGroup"), exports);
__exportStar(require("./getFirewallPolicyRuleGroup"), exports);
__exportStar(require("./getFlowLog"), exports);
__exportStar(require("./getForwardingRule"), exports);
__exportStar(require("./getFrontDoor"), exports);
__exportStar(require("./getHubRouteTable"), exports);
__exportStar(require("./getHubVirtualNetworkConnection"), exports);
__exportStar(require("./getInboundEndpoint"), exports);
__exportStar(require("./getInboundNatRule"), exports);
__exportStar(require("./getIpAllocation"), exports);
__exportStar(require("./getIpGroup"), exports);
__exportStar(require("./getLoadBalancer"), exports);
__exportStar(require("./getLoadBalancerBackendAddressPool"), exports);
__exportStar(require("./getLocalNetworkGateway"), exports);
__exportStar(require("./getManagementGroupNetworkManagerConnection"), exports);
__exportStar(require("./getNatGateway"), exports);
__exportStar(require("./getNatRule"), exports);
__exportStar(require("./getNetworkExperimentProfile"), exports);
__exportStar(require("./getNetworkGroup"), exports);
__exportStar(require("./getNetworkInterface"), exports);
__exportStar(require("./getNetworkInterfaceTapConfiguration"), exports);
__exportStar(require("./getNetworkManager"), exports);
__exportStar(require("./getNetworkProfile"), exports);
__exportStar(require("./getNetworkSecurityGroup"), exports);
__exportStar(require("./getNetworkSecurityPerimeter"), exports);
__exportStar(require("./getNetworkVirtualAppliance"), exports);
__exportStar(require("./getNetworkWatcher"), exports);
__exportStar(require("./getNspAccessRule"), exports);
__exportStar(require("./getNspAssociation"), exports);
__exportStar(require("./getNspProfile"), exports);
__exportStar(require("./getOutboundEndpoint"), exports);
__exportStar(require("./getP2sVpnGateway"), exports);
__exportStar(require("./getP2sVpnGatewayP2sVpnConnectionHealth"), exports);
__exportStar(require("./getP2sVpnGatewayP2sVpnConnectionHealthDetailed"), exports);
__exportStar(require("./getP2sVpnServerConfiguration"), exports);
__exportStar(require("./getPacketCapture"), exports);
__exportStar(require("./getPolicy"), exports);
__exportStar(require("./getPrivateDnsZoneGroup"), exports);
__exportStar(require("./getPrivateEndpoint"), exports);
__exportStar(require("./getPrivateLinkService"), exports);
__exportStar(require("./getPrivateLinkServicePrivateEndpointConnection"), exports);
__exportStar(require("./getPrivateRecordSet"), exports);
__exportStar(require("./getPrivateZone"), exports);
__exportStar(require("./getProfile"), exports);
__exportStar(require("./getPublicIPAddress"), exports);
__exportStar(require("./getPublicIPPrefix"), exports);
__exportStar(require("./getRecordSet"), exports);
__exportStar(require("./getRoute"), exports);
__exportStar(require("./getRouteFilter"), exports);
__exportStar(require("./getRouteFilterRule"), exports);
__exportStar(require("./getRouteTable"), exports);
__exportStar(require("./getRoutingIntent"), exports);
__exportStar(require("./getRulesEngine"), exports);
__exportStar(require("./getScopeConnection"), exports);
__exportStar(require("./getSecurityAdminConfiguration"), exports);
__exportStar(require("./getSecurityPartnerProvider"), exports);
__exportStar(require("./getSecurityRule"), exports);
__exportStar(require("./getSecurityUserConfiguration"), exports);
__exportStar(require("./getServiceEndpointPolicy"), exports);
__exportStar(require("./getServiceEndpointPolicyDefinition"), exports);
__exportStar(require("./getStaticMember"), exports);
__exportStar(require("./getSubnet"), exports);
__exportStar(require("./getSubscriptionNetworkManagerConnection"), exports);
__exportStar(require("./getTrafficManagerUserMetricsKey"), exports);
__exportStar(require("./getUserRule"), exports);
__exportStar(require("./getUserRuleCollection"), exports);
__exportStar(require("./getVirtualApplianceSite"), exports);
__exportStar(require("./getVirtualHub"), exports);
__exportStar(require("./getVirtualHubBgpConnection"), exports);
__exportStar(require("./getVirtualHubIpConfiguration"), exports);
__exportStar(require("./getVirtualHubRouteTableV2"), exports);
__exportStar(require("./getVirtualNetwork"), exports);
__exportStar(require("./getVirtualNetworkGateway"), exports);
__exportStar(require("./getVirtualNetworkGatewayAdvertisedRoutes"), exports);
__exportStar(require("./getVirtualNetworkGatewayBgpPeerStatus"), exports);
__exportStar(require("./getVirtualNetworkGatewayConnection"), exports);
__exportStar(require("./getVirtualNetworkGatewayLearnedRoutes"), exports);
__exportStar(require("./getVirtualNetworkGatewayNatRule"), exports);
__exportStar(require("./getVirtualNetworkGatewayVpnclientConnectionHealth"), exports);
__exportStar(require("./getVirtualNetworkGatewayVpnclientIpsecParameters"), exports);
__exportStar(require("./getVirtualNetworkLink"), exports);
__exportStar(require("./getVirtualNetworkPeering"), exports);
__exportStar(require("./getVirtualNetworkTap"), exports);
__exportStar(require("./getVirtualRouter"), exports);
__exportStar(require("./getVirtualRouterPeering"), exports);
__exportStar(require("./getVirtualWan"), exports);
__exportStar(require("./getVpnConnection"), exports);
__exportStar(require("./getVpnGateway"), exports);
__exportStar(require("./getVpnServerConfiguration"), exports);
__exportStar(require("./getVpnSite"), exports);
__exportStar(require("./getWebApplicationFirewallPolicy"), exports);
__exportStar(require("./getZone"), exports);
__exportStar(require("./hubRouteTable"), exports);
__exportStar(require("./hubVirtualNetworkConnection"), exports);
__exportStar(require("./inboundEndpoint"), exports);
__exportStar(require("./inboundNatRule"), exports);
__exportStar(require("./ipAllocation"), exports);
__exportStar(require("./ipGroup"), exports);
__exportStar(require("./listActiveConnectivityConfiguration"), exports);
__exportStar(require("./listActiveSecurityAdminRule"), exports);
__exportStar(require("./listActiveSecurityUserRule"), exports);
__exportStar(require("./listDnsForwardingRulesetByVirtualNetwork"), exports);
__exportStar(require("./listDnsResolverByVirtualNetwork"), exports);
__exportStar(require("./listEffectiveConnectivityConfiguration"), exports);
__exportStar(require("./listEffectiveVirtualNetworkByNetworkGroup"), exports);
__exportStar(require("./listEffectiveVirtualNetworkByNetworkManager"), exports);
__exportStar(require("./listFirewallPolicyIdpsSignature"), exports);
__exportStar(require("./listFirewallPolicyIdpsSignaturesFilterValue"), exports);
__exportStar(require("./listNetworkManagerDeploymentStatus"), exports);
__exportStar(require("./listNetworkManagerEffectiveSecurityAdminRule"), exports);
__exportStar(require("./loadBalancer"), exports);
__exportStar(require("./loadBalancerBackendAddressPool"), exports);
__exportStar(require("./localNetworkGateway"), exports);
__exportStar(require("./managementGroupNetworkManagerConnection"), exports);
__exportStar(require("./natGateway"), exports);
__exportStar(require("./natRule"), exports);
__exportStar(require("./networkExperimentProfile"), exports);
__exportStar(require("./networkGroup"), exports);
__exportStar(require("./networkInterface"), exports);
__exportStar(require("./networkInterfaceTapConfiguration"), exports);
__exportStar(require("./networkManager"), exports);
__exportStar(require("./networkProfile"), exports);
__exportStar(require("./networkSecurityGroup"), exports);
__exportStar(require("./networkSecurityPerimeter"), exports);
__exportStar(require("./networkVirtualAppliance"), exports);
__exportStar(require("./networkWatcher"), exports);
__exportStar(require("./nspAccessRule"), exports);
__exportStar(require("./nspAssociation"), exports);
__exportStar(require("./nspProfile"), exports);
__exportStar(require("./outboundEndpoint"), exports);
__exportStar(require("./p2sVpnGateway"), exports);
__exportStar(require("./p2sVpnServerConfiguration"), exports);
__exportStar(require("./packetCapture"), exports);
__exportStar(require("./policy"), exports);
__exportStar(require("./privateDnsZoneGroup"), exports);
__exportStar(require("./privateEndpoint"), exports);
__exportStar(require("./privateLinkService"), exports);
__exportStar(require("./privateLinkServicePrivateEndpointConnection"), exports);
__exportStar(require("./privateRecordSet"), exports);
__exportStar(require("./privateZone"), exports);
__exportStar(require("./profile"), exports);
__exportStar(require("./publicIPAddress"), exports);
__exportStar(require("./publicIPPrefix"), exports);
__exportStar(require("./recordSet"), exports);
__exportStar(require("./route"), exports);
__exportStar(require("./routeFilter"), exports);
__exportStar(require("./routeFilterRule"), exports);
__exportStar(require("./routeTable"), exports);
__exportStar(require("./routingIntent"), exports);
__exportStar(require("./rulesEngine"), exports);
__exportStar(require("./scopeConnection"), exports);
__exportStar(require("./securityAdminConfiguration"), exports);
__exportStar(require("./securityPartnerProvider"), exports);
__exportStar(require("./securityRule"), exports);
__exportStar(require("./securityUserConfiguration"), exports);
__exportStar(require("./serviceEndpointPolicy"), exports);
__exportStar(require("./serviceEndpointPolicyDefinition"), exports);
__exportStar(require("./staticMember"), exports);
__exportStar(require("./subnet"), exports);
__exportStar(require("./subscriptionNetworkManagerConnection"), exports);
__exportStar(require("./trafficManagerUserMetricsKey"), exports);
__exportStar(require("./userRule"), exports);
__exportStar(require("./userRuleCollection"), exports);
__exportStar(require("./virtualApplianceSite"), exports);
__exportStar(require("./virtualHub"), exports);
__exportStar(require("./virtualHubBgpConnection"), exports);
__exportStar(require("./virtualHubIpConfiguration"), exports);
__exportStar(require("./virtualHubRouteTableV2"), exports);
__exportStar(require("./virtualNetwork"), exports);
__exportStar(require("./virtualNetworkGateway"), exports);
__exportStar(require("./virtualNetworkGatewayConnection"), exports);
__exportStar(require("./virtualNetworkGatewayNatRule"), exports);
__exportStar(require("./virtualNetworkLink"), exports);
__exportStar(require("./virtualNetworkPeering"), exports);
__exportStar(require("./virtualNetworkTap"), exports);
__exportStar(require("./virtualRouter"), exports);
__exportStar(require("./virtualRouterPeering"), exports);
__exportStar(require("./virtualWan"), exports);
__exportStar(require("./vpnConnection"), exports);
__exportStar(require("./vpnGateway"), exports);
__exportStar(require("./vpnServerConfiguration"), exports);
__exportStar(require("./vpnSite"), exports);
__exportStar(require("./webApplicationFirewallPolicy"), exports);
__exportStar(require("./zone"), exports);
// Export enums:
__exportStar(require("../types/enums/network"), exports);
// Export sub-modules:
const v20150501preview = require("./v20150501preview");
exports.v20150501preview = v20150501preview;
const v20150504preview = require("./v20150504preview");
exports.v20150504preview = v20150504preview;
const v20150615 = require("./v20150615");
exports.v20150615 = v20150615;
const v20151101 = require("./v20151101");
exports.v20151101 = v20151101;
const v20160330 = require("./v20160330");
exports.v20160330 = v20160330;
const v20160401 = require("./v20160401");
exports.v20160401 = v20160401;
const v20160601 = require("./v20160601");
exports.v20160601 = v20160601;
const v20160901 = require("./v20160901");
exports.v20160901 = v20160901;
const v20161201 = require("./v20161201");
exports.v20161201 = v20161201;
const v20170301 = require("./v20170301");
exports.v20170301 = v20170301;
const v20170501 = require("./v20170501");
exports.v20170501 = v20170501;
const v20170601 = require("./v20170601");
exports.v20170601 = v20170601;
const v20170801 = require("./v20170801");
exports.v20170801 = v20170801;
const v20170901 = require("./v20170901");
exports.v20170901 = v20170901;
const v20170901preview = require("./v20170901preview");
exports.v20170901preview = v20170901preview;
const v20171001 = require("./v20171001");
exports.v20171001 = v20171001;
const v20171101 = require("./v20171101");
exports.v20171101 = v20171101;
const v20180101 = require("./v20180101");
exports.v20180101 = v20180101;
const v20180201 = require("./v20180201");
exports.v20180201 = v20180201;
const v20180301 = require("./v20180301");
exports.v20180301 = v20180301;
const v20180301preview = require("./v20180301preview");
exports.v20180301preview = v20180301preview;
const v20180401 = require("./v20180401");
exports.v20180401 = v20180401;
const v20180501 = require("./v20180501");
exports.v20180501 = v20180501;
const v20180601 = require("./v20180601");
exports.v20180601 = v20180601;
const v20180701 = require("./v20180701");
exports.v20180701 = v20180701;
const v20180801 = require("./v20180801");
exports.v20180801 = v20180801;
const v20180901 = require("./v20180901");
exports.v20180901 = v20180901;
const v20181001 = require("./v20181001");
exports.v20181001 = v20181001;
const v20181101 = require("./v20181101");
exports.v20181101 = v20181101;
const v20181201 = require("./v20181201");
exports.v20181201 = v20181201;
const v20190201 = require("./v20190201");
exports.v20190201 = v20190201;
const v20190301 = require("./v20190301");
exports.v20190301 = v20190301;
const v20190401 = require("./v20190401");
exports.v20190401 = v20190401;
const v20190501 = require("./v20190501");
exports.v20190501 = v20190501;
const v20190601 = require("./v20190601");
exports.v20190601 = v20190601;
const v20190701 = require("./v20190701");
exports.v20190701 = v20190701;
const v20190801 = require("./v20190801");
exports.v20190801 = v20190801;
const v20190901 = require("./v20190901");
exports.v20190901 = v20190901;
const v20191001 = require("./v20191001");
exports.v20191001 = v20191001;
const v20191101 = require("./v20191101");
exports.v20191101 = v20191101;
const v20191201 = require("./v20191201");
exports.v20191201 = v20191201;
const v20200101 = require("./v20200101");
exports.v20200101 = v20200101;
const v20200301 = require("./v20200301");
exports.v20200301 = v20200301;
const v20200401 = require("./v20200401");
exports.v20200401 = v20200401;
const v20200401preview = require("./v20200401preview");
exports.v20200401preview = v20200401preview;
const v20200501 = require("./v20200501");
exports.v20200501 = v20200501;
const v20200601 = require("./v20200601");
exports.v20200601 = v20200601;
const v20200701 = require("./v20200701");
exports.v20200701 = v20200701;
const v20200801 = require("./v20200801");
exports.v20200801 = v20200801;
const v20201101 = require("./v20201101");
exports.v20201101 = v20201101;
const v20210201 = require("./v20210201");
exports.v20210201 = v20210201;
const v20210201preview = require("./v20210201preview");
exports.v20210201preview = v20210201preview;
const v20210301 = require("./v20210301");
exports.v20210301 = v20210301;
const v20210301preview = require("./v20210301preview");
exports.v20210301preview = v20210301preview;
const v20210501 = require("./v20210501");
exports.v20210501 = v20210501;
const v20210501preview = require("./v20210501preview");
exports.v20210501preview = v20210501preview;
const v20210801 = require("./v20210801");
exports.v20210801 = v20210801;
const v20220201preview = require("./v20220201preview");
exports.v20220201preview = v20220201preview;
// Import resources to register:
const adminRule_1 = require("./adminRule");
const adminRuleCollection_1 = require("./adminRuleCollection");
const applicationGateway_1 = require("./applicationGateway");
const applicationGatewayPrivateEndpointConnection_1 = require("./applicationGatewayPrivateEndpointConnection");
const applicationSecurityGroup_1 = require("./applicationSecurityGroup");
const azureFirewall_1 = require("./azureFirewall");
const bastionHost_1 = require("./bastionHost");
const configurationPolicyGroup_1 = require("./configurationPolicyGroup");
const connectionMonitor_1 = require("./connectionMonitor");
const connectivityConfiguration_1 = require("./connectivityConfiguration");
const customIPPrefix_1 = require("./customIPPrefix");
const ddosCustomPolicy_1 = require("./ddosCustomPolicy");
const ddosProtectionPlan_1 = require("./ddosProtectionPlan");
const defaultAdminRule_1 = require("./defaultAdminRule");
const defaultUserRule_1 = require("./defaultUserRule");
const dnsForwardingRuleset_1 = require("./dnsForwardingRuleset");
const dnsResolver_1 = require("./dnsResolver");
const dscpConfiguration_1 = require("./dscpConfiguration");
const endpoint_1 = require("./endpoint");
const experiment_1 = require("./experiment");
const expressRouteCircuit_1 = require("./expressRouteCircuit");
const expressRouteCircuitAuthorization_1 = require("./expressRouteCircuitAuthorization");
const expressRouteCircuitConnection_1 = require("./expressRouteCircuitConnection");
const expressRouteCircuitPeering_1 = require("./expressRouteCircuitPeering");
const expressRouteConnection_1 = require("./expressRouteConnection");
const expressRouteCrossConnectionPeering_1 = require("./expressRouteCrossConnectionPeering");
const expressRouteGateway_1 = require("./expressRouteGateway");
const expressRoutePort_1 = require("./expressRoutePort");
const expressRoutePortAuthorization_1 = require("./expressRoutePortAuthorization");
const firewallPolicy_1 = require("./firewallPolicy");
const firewallPolicyRuleCollectionGroup_1 = require("./firewallPolicyRuleCollectionGroup");
const firewallPolicyRuleGroup_1 = require("./firewallPolicyRuleGroup");
const flowLog_1 = require("./flowLog");
const forwardingRule_1 = require("./forwardingRule");
const frontDoor_1 = require("./frontDoor");
const hubRouteTable_1 = require("./hubRouteTable");
const hubVirtualNetworkConnection_1 = require("./hubVirtualNetworkConnection");
const inboundEndpoint_1 = require("./inboundEndpoint");
const inboundNatRule_1 = require("./inboundNatRule");
const ipAllocation_1 = require("./ipAllocation");
const ipGroup_1 = require("./ipGroup");
const loadBalancer_1 = require("./loadBalancer");
const loadBalancerBackendAddressPool_1 = require("./loadBalancerBackendAddressPool");
const localNetworkGateway_1 = require("./localNetworkGateway");
const managementGroupNetworkManagerConnection_1 = require("./managementGroupNetworkManagerConnection");
const natGateway_1 = require("./natGateway");
const natRule_1 = require("./natRule");
const networkExperimentProfile_1 = require("./networkExperimentProfile");
const networkGroup_1 = require("./networkGroup");
const networkInterface_1 = require("./networkInterface");
const networkInterfaceTapConfiguration_1 = require("./networkInterfaceTapConfiguration");
const networkManager_1 = require("./networkManager");
const networkProfile_1 = require("./networkProfile");
const networkSecurityGroup_1 = require("./networkSecurityGroup");
const networkSecurityPerimeter_1 = require("./networkSecurityPerimeter");
const networkVirtualAppliance_1 = require("./networkVirtualAppliance");
const networkWatcher_1 = require("./networkWatcher");
const nspAccessRule_1 = require("./nspAccessRule");
const nspAssociation_1 = require("./nspAssociation");
const nspProfile_1 = require("./nspProfile");
const outboundEndpoint_1 = require("./outboundEndpoint");
const p2sVpnGateway_1 = require("./p2sVpnGateway");
const p2sVpnServerConfiguration_1 = require("./p2sVpnServerConfiguration");
const packetCapture_1 = require("./packetCapture");
const policy_1 = require("./policy");
const privateDnsZoneGroup_1 = require("./privateDnsZoneGroup");
const privateEndpoint_1 = require("./privateEndpoint");
const privateLinkService_1 = require("./privateLinkService");
const privateLinkServicePrivateEndpointConnection_1 = require("./privateLinkServicePrivateEndpointConnection");
const privateRecordSet_1 = require("./privateRecordSet");
const privateZone_1 = require("./privateZone");
const profile_1 = require("./profile");
const publicIPAddress_1 = require("./publicIPAddress");
const publicIPPrefix_1 = require("./publicIPPrefix");
const recordSet_1 = require("./recordSet");
const route_1 = require("./route");
const routeFilter_1 = require("./routeFilter");
const routeFilterRule_1 = require("./routeFilterRule");
const routeTable_1 = require("./routeTable");
const routingIntent_1 = require("./routingIntent");
const rulesEngine_1 = require("./rulesEngine");
const scopeConnection_1 = require("./scopeConnection");
const securityAdminConfiguration_1 = require("./securityAdminConfiguration");
const securityPartnerProvider_1 = require("./securityPartnerProvider");
const securityRule_1 = require("./securityRule");
const securityUserConfiguration_1 = require("./securityUserConfiguration");
const serviceEndpointPolicy_1 = require("./serviceEndpointPolicy");
const serviceEndpointPolicyDefinition_1 = require("./serviceEndpointPolicyDefinition");
const staticMember_1 = require("./staticMember");
const subnet_1 = require("./subnet");
const subscriptionNetworkManagerConnection_1 = require("./subscriptionNetworkManagerConnection");
const trafficManagerUserMetricsKey_1 = require("./trafficManagerUserMetricsKey");
const userRule_1 = require("./userRule");
const userRuleCollection_1 = require("./userRuleCollection");
const virtualApplianceSite_1 = require("./virtualApplianceSite");
const virtualHub_1 = require("./virtualHub");
const virtualHubBgpConnection_1 = require("./virtualHubBgpConnection");
const virtualHubIpConfiguration_1 = require("./virtualHubIpConfiguration");
const virtualHubRouteTableV2_1 = require("./virtualHubRouteTableV2");
const virtualNetwork_1 = require("./virtualNetwork");
const virtualNetworkGateway_1 = require("./virtualNetworkGateway");
const virtualNetworkGatewayConnection_1 = require("./virtualNetworkGatewayConnection");
const virtualNetworkGatewayNatRule_1 = require("./virtualNetworkGatewayNatRule");
const virtualNetworkLink_1 = require("./virtualNetworkLink");
const virtualNetworkPeering_1 = require("./virtualNetworkPeering");
const virtualNetworkTap_1 = require("./virtualNetworkTap");
const virtualRouter_1 = require("./virtualRouter");
const virtualRouterPeering_1 = require("./virtualRouterPeering");
const virtualWan_1 = require("./virtualWan");
const vpnConnection_1 = require("./vpnConnection");
const vpnGateway_1 = require("./vpnGateway");
const vpnServerConfiguration_1 = require("./vpnServerConfiguration");
const vpnSite_1 = require("./vpnSite");
const webApplicationFirewallPolicy_1 = require("./webApplicationFirewallPolicy");
const zone_1 = require("./zone");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure-native:network:AdminRule":
                return new adminRule_1.AdminRule(name, undefined, { urn });
            case "azure-native:network:AdminRuleCollection":
                return new adminRuleCollection_1.AdminRuleCollection(name, undefined, { urn });
            case "azure-native:network:ApplicationGateway":
                return new applicationGateway_1.ApplicationGateway(name, undefined, { urn });
            case "azure-native:network:ApplicationGatewayPrivateEndpointConnection":
                return new applicationGatewayPrivateEndpointConnection_1.ApplicationGatewayPrivateEndpointConnection(name, undefined, { urn });
            case "azure-native:network:ApplicationSecurityGroup":
                return new applicationSecurityGroup_1.ApplicationSecurityGroup(name, undefined, { urn });
            case "azure-native:network:AzureFirewall":
                return new azureFirewall_1.AzureFirewall(name, undefined, { urn });
            case "azure-native:network:BastionHost":
                return new bastionHost_1.BastionHost(name, undefined, { urn });
            case "azure-native:network:ConfigurationPolicyGroup":
                return new configurationPolicyGroup_1.ConfigurationPolicyGroup(name, undefined, { urn });
            case "azure-native:network:ConnectionMonitor":
                return new connectionMonitor_1.ConnectionMonitor(name, undefined, { urn });
            case "azure-native:network:ConnectivityConfiguration":
                return new connectivityConfiguration_1.ConnectivityConfiguration(name, undefined, { urn });
            case "azure-native:network:CustomIPPrefix":
                return new customIPPrefix_1.CustomIPPrefix(name, undefined, { urn });
            case "azure-native:network:DdosCustomPolicy":
                return new ddosCustomPolicy_1.DdosCustomPolicy(name, undefined, { urn });
            case "azure-native:network:DdosProtectionPlan":
                return new ddosProtectionPlan_1.DdosProtectionPlan(name, undefined, { urn });
            case "azure-native:network:DefaultAdminRule":
                return new defaultAdminRule_1.DefaultAdminRule(name, undefined, { urn });
            case "azure-native:network:DefaultUserRule":
                return new defaultUserRule_1.DefaultUserRule(name, undefined, { urn });
            case "azure-native:network:DnsForwardingRuleset":
                return new dnsForwardingRuleset_1.DnsForwardingRuleset(name, undefined, { urn });
            case "azure-native:network:DnsResolver":
                return new dnsResolver_1.DnsResolver(name, undefined, { urn });
            case "azure-native:network:DscpConfiguration":
                return new dscpConfiguration_1.DscpConfiguration(name, undefined, { urn });
            case "azure-native:network:Endpoint":
                return new endpoint_1.Endpoint(name, undefined, { urn });
            case "azure-native:network:Experiment":
                return new experiment_1.Experiment(name, undefined, { urn });
            case "azure-native:network:ExpressRouteCircuit":
                return new expressRouteCircuit_1.ExpressRouteCircuit(name, undefined, { urn });
            case "azure-native:network:ExpressRouteCircuitAuthorization":
                return new expressRouteCircuitAuthorization_1.ExpressRouteCircuitAuthorization(name, undefined, { urn });
            case "azure-native:network:ExpressRouteCircuitConnection":
                return new expressRouteCircuitConnection_1.ExpressRouteCircuitConnection(name, undefined, { urn });
            case "azure-native:network:ExpressRouteCircuitPeering":
                return new expressRouteCircuitPeering_1.ExpressRouteCircuitPeering(name, undefined, { urn });
            case "azure-native:network:ExpressRouteConnection":
                return new expressRouteConnection_1.ExpressRouteConnection(name, undefined, { urn });
            case "azure-native:network:ExpressRouteCrossConnectionPeering":
                return new expressRouteCrossConnectionPeering_1.ExpressRouteCrossConnectionPeering(name, undefined, { urn });
            case "azure-native:network:ExpressRouteGateway":
                return new expressRouteGateway_1.ExpressRouteGateway(name, undefined, { urn });
            case "azure-native:network:ExpressRoutePort":
                return new expressRoutePort_1.ExpressRoutePort(name, undefined, { urn });
            case "azure-native:network:ExpressRoutePortAuthorization":
                return new expressRoutePortAuthorization_1.ExpressRoutePortAuthorization(name, undefined, { urn });
            case "azure-native:network:FirewallPolicy":
                return new firewallPolicy_1.FirewallPolicy(name, undefined, { urn });
            case "azure-native:network:FirewallPolicyRuleCollectionGroup":
                return new firewallPolicyRuleCollectionGroup_1.FirewallPolicyRuleCollectionGroup(name, undefined, { urn });
            case "azure-native:network:FirewallPolicyRuleGroup":
                return new firewallPolicyRuleGroup_1.FirewallPolicyRuleGroup(name, undefined, { urn });
            case "azure-native:network:FlowLog":
                return new flowLog_1.FlowLog(name, undefined, { urn });
            case "azure-native:network:ForwardingRule":
                return new forwardingRule_1.ForwardingRule(name, undefined, { urn });
            case "azure-native:network:FrontDoor":
                return new frontDoor_1.FrontDoor(name, undefined, { urn });
            case "azure-native:network:HubRouteTable":
                return new hubRouteTable_1.HubRouteTable(name, undefined, { urn });
            case "azure-native:network:HubVirtualNetworkConnection":
                return new hubVirtualNetworkConnection_1.HubVirtualNetworkConnection(name, undefined, { urn });
            case "azure-native:network:InboundEndpoint":
                return new inboundEndpoint_1.InboundEndpoint(name, undefined, { urn });
            case "azure-native:network:InboundNatRule":
                return new inboundNatRule_1.InboundNatRule(name, undefined, { urn });
            case "azure-native:network:IpAllocation":
                return new ipAllocation_1.IpAllocation(name, undefined, { urn });
            case "azure-native:network:IpGroup":
                return new ipGroup_1.IpGroup(name, undefined, { urn });
            case "azure-native:network:LoadBalancer":
                return new loadBalancer_1.LoadBalancer(name, undefined, { urn });
            case "azure-native:network:LoadBalancerBackendAddressPool":
                return new loadBalancerBackendAddressPool_1.LoadBalancerBackendAddressPool(name, undefined, { urn });
            case "azure-native:network:LocalNetworkGateway":
                return new localNetworkGateway_1.LocalNetworkGateway(name, undefined, { urn });
            case "azure-native:network:ManagementGroupNetworkManagerConnection":
                return new managementGroupNetworkManagerConnection_1.ManagementGroupNetworkManagerConnection(name, undefined, { urn });
            case "azure-native:network:NatGateway":
                return new natGateway_1.NatGateway(name, undefined, { urn });
            case "azure-native:network:NatRule":
                return new natRule_1.NatRule(name, undefined, { urn });
            case "azure-native:network:NetworkExperimentProfile":
                return new networkExperimentProfile_1.NetworkExperimentProfile(name, undefined, { urn });
            case "azure-native:network:NetworkGroup":
                return new networkGroup_1.NetworkGroup(name, undefined, { urn });
            case "azure-native:network:NetworkInterface":
                return new networkInterface_1.NetworkInterface(name, undefined, { urn });
            case "azure-native:network:NetworkInterfaceTapConfiguration":
                return new networkInterfaceTapConfiguration_1.NetworkInterfaceTapConfiguration(name, undefined, { urn });
            case "azure-native:network:NetworkManager":
                return new networkManager_1.NetworkManager(name, undefined, { urn });
            case "azure-native:network:NetworkProfile":
                return new networkProfile_1.NetworkProfile(name, undefined, { urn });
            case "azure-native:network:NetworkSecurityGroup":
                return new networkSecurityGroup_1.NetworkSecurityGroup(name, undefined, { urn });
            case "azure-native:network:NetworkSecurityPerimeter":
                return new networkSecurityPerimeter_1.NetworkSecurityPerimeter(name, undefined, { urn });
            case "azure-native:network:NetworkVirtualAppliance":
                return new networkVirtualAppliance_1.NetworkVirtualAppliance(name, undefined, { urn });
            case "azure-native:network:NetworkWatcher":
                return new networkWatcher_1.NetworkWatcher(name, undefined, { urn });
            case "azure-native:network:NspAccessRule":
                return new nspAccessRule_1.NspAccessRule(name, undefined, { urn });
            case "azure-native:network:NspAssociation":
                return new nspAssociation_1.NspAssociation(name, undefined, { urn });
            case "azure-native:network:NspProfile":
                return new nspProfile_1.NspProfile(name, undefined, { urn });
            case "azure-native:network:OutboundEndpoint":
                return new outboundEndpoint_1.OutboundEndpoint(name, undefined, { urn });
            case "azure-native:network:P2sVpnGateway":
                return new p2sVpnGateway_1.P2sVpnGateway(name, undefined, { urn });
            case "azure-native:network:P2sVpnServerConfiguration":
                return new p2sVpnServerConfiguration_1.P2sVpnServerConfiguration(name, undefined, { urn });
            case "azure-native:network:PacketCapture":
                return new packetCapture_1.PacketCapture(name, undefined, { urn });
            case "azure-native:network:Policy":
                return new policy_1.Policy(name, undefined, { urn });
            case "azure-native:network:PrivateDnsZoneGroup":
                return new privateDnsZoneGroup_1.PrivateDnsZoneGroup(name, undefined, { urn });
            case "azure-native:network:PrivateEndpoint":
                return new privateEndpoint_1.PrivateEndpoint(name, undefined, { urn });
            case "azure-native:network:PrivateLinkService":
                return new privateLinkService_1.PrivateLinkService(name, undefined, { urn });
            case "azure-native:network:PrivateLinkServicePrivateEndpointConnection":
                return new privateLinkServicePrivateEndpointConnection_1.PrivateLinkServicePrivateEndpointConnection(name, undefined, { urn });
            case "azure-native:network:PrivateRecordSet":
                return new privateRecordSet_1.PrivateRecordSet(name, undefined, { urn });
            case "azure-native:network:PrivateZone":
                return new privateZone_1.PrivateZone(name, undefined, { urn });
            case "azure-native:network:Profile":
                return new profile_1.Profile(name, undefined, { urn });
            case "azure-native:network:PublicIPAddress":
                return new publicIPAddress_1.PublicIPAddress(name, undefined, { urn });
            case "azure-native:network:PublicIPPrefix":
                return new publicIPPrefix_1.PublicIPPrefix(name, undefined, { urn });
            case "azure-native:network:RecordSet":
                return new recordSet_1.RecordSet(name, undefined, { urn });
            case "azure-native:network:Route":
                return new route_1.Route(name, undefined, { urn });
            case "azure-native:network:RouteFilter":
                return new routeFilter_1.RouteFilter(name, undefined, { urn });
            case "azure-native:network:RouteFilterRule":
                return new routeFilterRule_1.RouteFilterRule(name, undefined, { urn });
            case "azure-native:network:RouteTable":
                return new routeTable_1.RouteTable(name, undefined, { urn });
            case "azure-native:network:RoutingIntent":
                return new routingIntent_1.RoutingIntent(name, undefined, { urn });
            case "azure-native:network:RulesEngine":
                return new rulesEngine_1.RulesEngine(name, undefined, { urn });
            case "azure-native:network:ScopeConnection":
                return new scopeConnection_1.ScopeConnection(name, undefined, { urn });
            case "azure-native:network:SecurityAdminConfiguration":
                return new securityAdminConfiguration_1.SecurityAdminConfiguration(name, undefined, { urn });
            case "azure-native:network:SecurityPartnerProvider":
                return new securityPartnerProvider_1.SecurityPartnerProvider(name, undefined, { urn });
            case "azure-native:network:SecurityRule":
                return new securityRule_1.SecurityRule(name, undefined, { urn });
            case "azure-native:network:SecurityUserConfiguration":
                return new securityUserConfiguration_1.SecurityUserConfiguration(name, undefined, { urn });
            case "azure-native:network:ServiceEndpointPolicy":
                return new serviceEndpointPolicy_1.ServiceEndpointPolicy(name, undefined, { urn });
            case "azure-native:network:ServiceEndpointPolicyDefinition":
                return new serviceEndpointPolicyDefinition_1.ServiceEndpointPolicyDefinition(name, undefined, { urn });
            case "azure-native:network:StaticMember":
                return new staticMember_1.StaticMember(name, undefined, { urn });
            case "azure-native:network:Subnet":
                return new subnet_1.Subnet(name, undefined, { urn });
            case "azure-native:network:SubscriptionNetworkManagerConnection":
                return new subscriptionNetworkManagerConnection_1.SubscriptionNetworkManagerConnection(name, undefined, { urn });
            case "azure-native:network:TrafficManagerUserMetricsKey":
                return new trafficManagerUserMetricsKey_1.TrafficManagerUserMetricsKey(name, undefined, { urn });
            case "azure-native:network:UserRule":
                return new userRule_1.UserRule(name, undefined, { urn });
            case "azure-native:network:UserRuleCollection":
                return new userRuleCollection_1.UserRuleCollection(name, undefined, { urn });
            case "azure-native:network:VirtualApplianceSite":
                return new virtualApplianceSite_1.VirtualApplianceSite(name, undefined, { urn });
            case "azure-native:network:VirtualHub":
                return new virtualHub_1.VirtualHub(name, undefined, { urn });
            case "azure-native:network:VirtualHubBgpConnection":
                return new virtualHubBgpConnection_1.VirtualHubBgpConnection(name, undefined, { urn });
            case "azure-native:network:VirtualHubIpConfiguration":
                return new virtualHubIpConfiguration_1.VirtualHubIpConfiguration(name, undefined, { urn });
            case "azure-native:network:VirtualHubRouteTableV2":
                return new virtualHubRouteTableV2_1.VirtualHubRouteTableV2(name, undefined, { urn });
            case "azure-native:network:VirtualNetwork":
                return new virtualNetwork_1.VirtualNetwork(name, undefined, { urn });
            case "azure-native:network:VirtualNetworkGateway":
                return new virtualNetworkGateway_1.VirtualNetworkGateway(name, undefined, { urn });
            case "azure-native:network:VirtualNetworkGatewayConnection":
                return new virtualNetworkGatewayConnection_1.VirtualNetworkGatewayConnection(name, undefined, { urn });
            case "azure-native:network:VirtualNetworkGatewayNatRule":
                return new virtualNetworkGatewayNatRule_1.VirtualNetworkGatewayNatRule(name, undefined, { urn });
            case "azure-native:network:VirtualNetworkLink":
                return new virtualNetworkLink_1.VirtualNetworkLink(name, undefined, { urn });
            case "azure-native:network:VirtualNetworkPeering":
                return new virtualNetworkPeering_1.VirtualNetworkPeering(name, undefined, { urn });
            case "azure-native:network:VirtualNetworkTap":
                return new virtualNetworkTap_1.VirtualNetworkTap(name, undefined, { urn });
            case "azure-native:network:VirtualRouter":
                return new virtualRouter_1.VirtualRouter(name, undefined, { urn });
            case "azure-native:network:VirtualRouterPeering":
                return new virtualRouterPeering_1.VirtualRouterPeering(name, undefined, { urn });
            case "azure-native:network:VirtualWan":
                return new virtualWan_1.VirtualWan(name, undefined, { urn });
            case "azure-native:network:VpnConnection":
                return new vpnConnection_1.VpnConnection(name, undefined, { urn });
            case "azure-native:network:VpnGateway":
                return new vpnGateway_1.VpnGateway(name, undefined, { urn });
            case "azure-native:network:VpnServerConfiguration":
                return new vpnServerConfiguration_1.VpnServerConfiguration(name, undefined, { urn });
            case "azure-native:network:VpnSite":
                return new vpnSite_1.VpnSite(name, undefined, { urn });
            case "azure-native:network:WebApplicationFirewallPolicy":
                return new webApplicationFirewallPolicy_1.WebApplicationFirewallPolicy(name, undefined, { urn });
            case "azure-native:network:Zone":
                return new zone_1.Zone(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "network", _module);
//# sourceMappingURL=data:application/json;base64,