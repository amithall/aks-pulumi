"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
// Export members:
__export(require("./certRequest"));
__export(require("./getCertificate"));
__export(require("./getPublicKey"));
__export(require("./locallySignedCert"));
__export(require("./privateKey"));
__export(require("./provider"));
__export(require("./selfSignedCert"));
// Export sub-modules:
const types = require("./types");
exports.types = types;
// Import resources to register:
const certRequest_1 = require("./certRequest");
const locallySignedCert_1 = require("./locallySignedCert");
const privateKey_1 = require("./privateKey");
const selfSignedCert_1 = require("./selfSignedCert");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "tls:index/certRequest:CertRequest":
                return new certRequest_1.CertRequest(name, undefined, { urn });
            case "tls:index/locallySignedCert:LocallySignedCert":
                return new locallySignedCert_1.LocallySignedCert(name, undefined, { urn });
            case "tls:index/privateKey:PrivateKey":
                return new privateKey_1.PrivateKey(name, undefined, { urn });
            case "tls:index/selfSignedCert:SelfSignedCert":
                return new selfSignedCert_1.SelfSignedCert(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tls", "index/certRequest", _module);
pulumi.runtime.registerResourceModule("tls", "index/locallySignedCert", _module);
pulumi.runtime.registerResourceModule("tls", "index/privateKey", _module);
pulumi.runtime.registerResourceModule("tls", "index/selfSignedCert", _module);
const provider_1 = require("./provider");
pulumi.runtime.registerResourcePackage("tls", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:tls") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new provider_1.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map