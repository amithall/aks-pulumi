"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class LocallySignedCert extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["allowedUses"] = state ? state.allowedUses : undefined;
            inputs["caCertPem"] = state ? state.caCertPem : undefined;
            inputs["caKeyAlgorithm"] = state ? state.caKeyAlgorithm : undefined;
            inputs["caPrivateKeyPem"] = state ? state.caPrivateKeyPem : undefined;
            inputs["certPem"] = state ? state.certPem : undefined;
            inputs["certRequestPem"] = state ? state.certRequestPem : undefined;
            inputs["earlyRenewalHours"] = state ? state.earlyRenewalHours : undefined;
            inputs["isCaCertificate"] = state ? state.isCaCertificate : undefined;
            inputs["readyForRenewal"] = state ? state.readyForRenewal : undefined;
            inputs["setSubjectKeyId"] = state ? state.setSubjectKeyId : undefined;
            inputs["validityEndTime"] = state ? state.validityEndTime : undefined;
            inputs["validityPeriodHours"] = state ? state.validityPeriodHours : undefined;
            inputs["validityStartTime"] = state ? state.validityStartTime : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.allowedUses === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowedUses'");
            }
            if ((!args || args.caCertPem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'caCertPem'");
            }
            if ((!args || args.caKeyAlgorithm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'caKeyAlgorithm'");
            }
            if ((!args || args.caPrivateKeyPem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'caPrivateKeyPem'");
            }
            if ((!args || args.certRequestPem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certRequestPem'");
            }
            if ((!args || args.validityPeriodHours === undefined) && !opts.urn) {
                throw new Error("Missing required property 'validityPeriodHours'");
            }
            inputs["allowedUses"] = args ? args.allowedUses : undefined;
            inputs["caCertPem"] = args ? args.caCertPem : undefined;
            inputs["caKeyAlgorithm"] = args ? args.caKeyAlgorithm : undefined;
            inputs["caPrivateKeyPem"] = args ? args.caPrivateKeyPem : undefined;
            inputs["certRequestPem"] = args ? args.certRequestPem : undefined;
            inputs["earlyRenewalHours"] = args ? args.earlyRenewalHours : undefined;
            inputs["isCaCertificate"] = args ? args.isCaCertificate : undefined;
            inputs["setSubjectKeyId"] = args ? args.setSubjectKeyId : undefined;
            inputs["validityPeriodHours"] = args ? args.validityPeriodHours : undefined;
            inputs["certPem"] = undefined /*out*/;
            inputs["readyForRenewal"] = undefined /*out*/;
            inputs["validityEndTime"] = undefined /*out*/;
            inputs["validityStartTime"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(LocallySignedCert.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing LocallySignedCert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LocallySignedCert(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LocallySignedCert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LocallySignedCert.__pulumiType;
    }
}
exports.LocallySignedCert = LocallySignedCert;
/** @internal */
LocallySignedCert.__pulumiType = 'tls:index/locallySignedCert:LocallySignedCert';
//# sourceMappingURL=locallySignedCert.js.map