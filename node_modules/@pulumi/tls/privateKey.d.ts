import * as pulumi from "@pulumi/pulumi";
export declare class PrivateKey extends pulumi.CustomResource {
    /**
     * Get an existing PrivateKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrivateKeyState, opts?: pulumi.CustomResourceOptions): PrivateKey;
    /**
     * Returns true if the given object is an instance of PrivateKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is PrivateKey;
    /**
     * The name of the algorithm to use for
     * the key. Currently-supported values are "RSA" and "ECDSA".
     */
    readonly algorithm: pulumi.Output<string>;
    /**
     * When `algorithm` is "ECDSA", the name of the elliptic
     * curve to use. May be any one of "P224", "P256", "P384" or "P521", with "P224" as the
     * default.
     */
    readonly ecdsaCurve: pulumi.Output<string | undefined>;
    /**
     * The private key data in PEM format.
     */
    readonly privateKeyPem: pulumi.Output<string>;
    /**
     * The md5 hash of the public key data in
     * OpenSSH MD5 hash format, e.g. `aa:bb:cc:...`. Only available if the
     * selected private key format is compatible, as per the rules for
     * `publicKeyOpenssh`.
     */
    readonly publicKeyFingerprintMd5: pulumi.Output<string>;
    /**
     * The public key data in OpenSSH `authorizedKeys`
     * format, if the selected private key format is compatible. All RSA keys
     * are supported, and ECDSA keys with curves "P256", "P384" and "P521"
     * are supported. This attribute is empty if an incompatible ECDSA curve
     * is selected.
     */
    readonly publicKeyOpenssh: pulumi.Output<string>;
    /**
     * The public key data in PEM format.
     */
    readonly publicKeyPem: pulumi.Output<string>;
    /**
     * When `algorithm` is "RSA", the size of the generated
     * RSA key in bits. Defaults to 2048.
     */
    readonly rsaBits: pulumi.Output<number | undefined>;
    /**
     * Create a PrivateKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrivateKeyArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering PrivateKey resources.
 */
export interface PrivateKeyState {
    /**
     * The name of the algorithm to use for
     * the key. Currently-supported values are "RSA" and "ECDSA".
     */
    readonly algorithm?: pulumi.Input<string>;
    /**
     * When `algorithm` is "ECDSA", the name of the elliptic
     * curve to use. May be any one of "P224", "P256", "P384" or "P521", with "P224" as the
     * default.
     */
    readonly ecdsaCurve?: pulumi.Input<string>;
    /**
     * The private key data in PEM format.
     */
    readonly privateKeyPem?: pulumi.Input<string>;
    /**
     * The md5 hash of the public key data in
     * OpenSSH MD5 hash format, e.g. `aa:bb:cc:...`. Only available if the
     * selected private key format is compatible, as per the rules for
     * `publicKeyOpenssh`.
     */
    readonly publicKeyFingerprintMd5?: pulumi.Input<string>;
    /**
     * The public key data in OpenSSH `authorizedKeys`
     * format, if the selected private key format is compatible. All RSA keys
     * are supported, and ECDSA keys with curves "P256", "P384" and "P521"
     * are supported. This attribute is empty if an incompatible ECDSA curve
     * is selected.
     */
    readonly publicKeyOpenssh?: pulumi.Input<string>;
    /**
     * The public key data in PEM format.
     */
    readonly publicKeyPem?: pulumi.Input<string>;
    /**
     * When `algorithm` is "RSA", the size of the generated
     * RSA key in bits. Defaults to 2048.
     */
    readonly rsaBits?: pulumi.Input<number>;
}
/**
 * The set of arguments for constructing a PrivateKey resource.
 */
export interface PrivateKeyArgs {
    /**
     * The name of the algorithm to use for
     * the key. Currently-supported values are "RSA" and "ECDSA".
     */
    readonly algorithm: pulumi.Input<string>;
    /**
     * When `algorithm` is "ECDSA", the name of the elliptic
     * curve to use. May be any one of "P224", "P256", "P384" or "P521", with "P224" as the
     * default.
     */
    readonly ecdsaCurve?: pulumi.Input<string>;
    /**
     * When `algorithm` is "RSA", the size of the generated
     * RSA key in bits. Defaults to 2048.
     */
    readonly rsaBits?: pulumi.Input<number>;
}
