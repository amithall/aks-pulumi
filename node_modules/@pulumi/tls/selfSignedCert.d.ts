import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
export declare class SelfSignedCert extends pulumi.CustomResource {
    /**
     * Get an existing SelfSignedCert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SelfSignedCertState, opts?: pulumi.CustomResourceOptions): SelfSignedCert;
    /**
     * Returns true if the given object is an instance of SelfSignedCert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is SelfSignedCert;
    /**
     * List of keywords each describing a use that is permitted
     * for the issued certificate. The valid keywords are listed below.
     */
    readonly allowedUses: pulumi.Output<string[]>;
    /**
     * The certificate data in PEM format.
     */
    readonly certPem: pulumi.Output<string>;
    /**
     * List of DNS names for which a certificate is being requested.
     */
    readonly dnsNames: pulumi.Output<string[] | undefined>;
    /**
     * Number of hours before the certificates expiry when a new certificate will be generated
     */
    readonly earlyRenewalHours: pulumi.Output<number | undefined>;
    /**
     * List of IP addresses for which a certificate is being requested.
     */
    readonly ipAddresses: pulumi.Output<string[] | undefined>;
    /**
     * Boolean controlling whether the CA flag will be set in the
     * generated certificate. Defaults to `false`, meaning that the certificate does not represent
     * a certificate authority.
     */
    readonly isCaCertificate: pulumi.Output<boolean | undefined>;
    /**
     * The name of the algorithm for the key provided
     * in `privateKeyPem`.
     */
    readonly keyAlgorithm: pulumi.Output<string>;
    /**
     * PEM-encoded private key that the certificate will belong to
     */
    readonly privateKeyPem: pulumi.Output<string>;
    readonly readyForRenewal: pulumi.Output<boolean>;
    /**
     * If `true`, the certificate will include
     * the subject key identifier. Defaults to `false`, in which case the subject
     * key identifier is not set at all.
     */
    readonly setSubjectKeyId: pulumi.Output<boolean | undefined>;
    /**
     * The subject for which a certificate is being requested.
     * This is a nested configuration block whose structure matches the
     * corresponding block for `tls.CertRequest`.
     */
    readonly subjects: pulumi.Output<outputs.SelfSignedCertSubject[]>;
    /**
     * List of URIs for which a certificate is being requested.
     */
    readonly uris: pulumi.Output<string[] | undefined>;
    /**
     * The time until which the certificate is invalid, as an
     * [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
     */
    readonly validityEndTime: pulumi.Output<string>;
    /**
     * The number of hours after initial issuing that the
     * certificate will become invalid.
     */
    readonly validityPeriodHours: pulumi.Output<number>;
    /**
     * The time after which the certificate is valid, as an
     * [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
     */
    readonly validityStartTime: pulumi.Output<string>;
    /**
     * Create a SelfSignedCert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SelfSignedCertArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering SelfSignedCert resources.
 */
export interface SelfSignedCertState {
    /**
     * List of keywords each describing a use that is permitted
     * for the issued certificate. The valid keywords are listed below.
     */
    readonly allowedUses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The certificate data in PEM format.
     */
    readonly certPem?: pulumi.Input<string>;
    /**
     * List of DNS names for which a certificate is being requested.
     */
    readonly dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of hours before the certificates expiry when a new certificate will be generated
     */
    readonly earlyRenewalHours?: pulumi.Input<number>;
    /**
     * List of IP addresses for which a certificate is being requested.
     */
    readonly ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Boolean controlling whether the CA flag will be set in the
     * generated certificate. Defaults to `false`, meaning that the certificate does not represent
     * a certificate authority.
     */
    readonly isCaCertificate?: pulumi.Input<boolean>;
    /**
     * The name of the algorithm for the key provided
     * in `privateKeyPem`.
     */
    readonly keyAlgorithm?: pulumi.Input<string>;
    /**
     * PEM-encoded private key that the certificate will belong to
     */
    readonly privateKeyPem?: pulumi.Input<string>;
    readonly readyForRenewal?: pulumi.Input<boolean>;
    /**
     * If `true`, the certificate will include
     * the subject key identifier. Defaults to `false`, in which case the subject
     * key identifier is not set at all.
     */
    readonly setSubjectKeyId?: pulumi.Input<boolean>;
    /**
     * The subject for which a certificate is being requested.
     * This is a nested configuration block whose structure matches the
     * corresponding block for `tls.CertRequest`.
     */
    readonly subjects?: pulumi.Input<pulumi.Input<inputs.SelfSignedCertSubject>[]>;
    /**
     * List of URIs for which a certificate is being requested.
     */
    readonly uris?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The time until which the certificate is invalid, as an
     * [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
     */
    readonly validityEndTime?: pulumi.Input<string>;
    /**
     * The number of hours after initial issuing that the
     * certificate will become invalid.
     */
    readonly validityPeriodHours?: pulumi.Input<number>;
    /**
     * The time after which the certificate is valid, as an
     * [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
     */
    readonly validityStartTime?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a SelfSignedCert resource.
 */
export interface SelfSignedCertArgs {
    /**
     * List of keywords each describing a use that is permitted
     * for the issued certificate. The valid keywords are listed below.
     */
    readonly allowedUses: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of DNS names for which a certificate is being requested.
     */
    readonly dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of hours before the certificates expiry when a new certificate will be generated
     */
    readonly earlyRenewalHours?: pulumi.Input<number>;
    /**
     * List of IP addresses for which a certificate is being requested.
     */
    readonly ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Boolean controlling whether the CA flag will be set in the
     * generated certificate. Defaults to `false`, meaning that the certificate does not represent
     * a certificate authority.
     */
    readonly isCaCertificate?: pulumi.Input<boolean>;
    /**
     * The name of the algorithm for the key provided
     * in `privateKeyPem`.
     */
    readonly keyAlgorithm: pulumi.Input<string>;
    /**
     * PEM-encoded private key that the certificate will belong to
     */
    readonly privateKeyPem: pulumi.Input<string>;
    /**
     * If `true`, the certificate will include
     * the subject key identifier. Defaults to `false`, in which case the subject
     * key identifier is not set at all.
     */
    readonly setSubjectKeyId?: pulumi.Input<boolean>;
    /**
     * The subject for which a certificate is being requested.
     * This is a nested configuration block whose structure matches the
     * corresponding block for `tls.CertRequest`.
     */
    readonly subjects: pulumi.Input<pulumi.Input<inputs.SelfSignedCertSubject>[]>;
    /**
     * List of URIs for which a certificate is being requested.
     */
    readonly uris?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of hours after initial issuing that the
     * certificate will become invalid.
     */
    readonly validityPeriodHours: pulumi.Input<number>;
}
